/* eslint-disable  */
// @ts-nocheck
/**
 * Do not edit this file, this file is auto generate by script.
 * */

import {
  Attachment,
  AttachmentDTO,
  AttachmentParam,
  AuthToken,
  Author,
  BackupDTO,
  BaseCommentDTO,
  BaseCommentVO,
  BaseCommentWithParentVO,
  BaseMetaDTO,
  BasePostDetailDTO,
  BasePostMinimalDTO,
  BasePostSimpleDTO,
  BaseResponseOfboolean,
  BaseResponseOfobject,
  BaseResponseOfstring,
  CategoryDTO,
  CategoryParam,
  CategoryVO,
  CustomizedPageOfAttachmentDTO,
  CustomizedPageOfBaseCommentVO,
  CustomizedPageOfBaseCommentWithParentVO,
  CustomizedPageOfBasePostSimpleDTO,
  CustomizedPageOfJournalCommentWithJournalVO,
  CustomizedPageOfJournalWithCmtCountDTO,
  CustomizedPageOfLogDTO,
  CustomizedPageOfOptionSimpleDTO,
  CustomizedPageOfPhotoDTO,
  CustomizedPageOfPostCommentWithPostVO,
  CustomizedPageOfSheetCommentWithSheetVO,
  CustomizedPageOfSheetListVO,
  EnvironmentDTO,
  Group,
  IndependentSheetDTO,
  InputStream,
  InstallParam,
  Item,
  JournalCommentParam,
  JournalCommentWithJournalVO,
  JournalDTO,
  JournalParam,
  JournalWithCmtCountDTO,
  LinkDTO,
  LinkParam,
  LogDTO,
  LoginParam,
  LoginPreCheckDTO,
  MailParam,
  MenuDTO,
  MenuParam,
  MenuVO,
  MultiFactorAuthParam,
  MultiFactorAuthVO,
  Option,
  OptionDTO,
  OptionParam,
  OptionSimpleDTO,
  PasswordParam,
  PhotoDTO,
  PhotoParam,
  Post,
  PostComment,
  PostCommentParam,
  PostCommentWithPostVO,
  PostContentParam,
  PostDetailVO,
  PostMarkdownParam,
  PostMetaParam,
  PostParam,
  ResetPasswordParam,
  Resource,
  SheetComment,
  SheetCommentParam,
  SheetCommentWithSheetVO,
  SheetDetailVO,
  SheetListVO,
  SheetMetaParam,
  SheetParam,
  StaticContentParam,
  StaticFile,
  StatisticDTO,
  StatisticWithUserDTO,
  TagDTO,
  TagParam,
  ThemeContentParam,
  ThemeFile,
  ThemeProperty,
  UserDTO,
  UserParam,
} from "./adminApiDefine";

export const apiInfo = {
  version: "1.4.5",
  authKey: "ADMIN-Authorization",
};

// @ts-nocheck
import axios, { AxiosInstance, AxiosRequestConfig } from "axios";

interface IConfig {
  target: string;
  accessKey: string;
  axios: AxiosInstance;
}

export const configs: IConfig = {
  target: "",
  accessKey: "",
  axios: null,
};

export function axiosRequestInterceptor(conf: AxiosRequestConfig) {
  if (configs.accessKey) {
    // apiInfo generate by core.ts
    conf.headers[apiInfo.authKey] = configs.accessKey;
  }

  conf.url = conf.url.replace(/\{\w+\}/g, (name) => {
    return conf.params[name.slice(1, name.length - 1)];
  });

  return conf;
}

export function initConfig(opt: Partial<IConfig>) {
  Object.assign(configs, opt);

  configs.axios = axios.create({
    baseURL: configs.target,
  });

  configs.axios.interceptors.request.use(axiosRequestInterceptor);
}

function decodeResponseData(data: any) {
  return data.data ? data.data : data;
}

async function get(path: string, data?: any = {}) {
  const { __body, ...other } = data;

  const res = await configs.axios.get(path, { params: other, data: __body });

  return decodeResponseData(res.data);
}

async function post(path: string, data?: any = {}) {
  const { __body, ...other } = data;

  const res = await configs.axios.post(path, __body, {
    params: other,
    data: __body,
  });

  return decodeResponseData(res.data);
}

async function put(path: string, data?: any = {}) {
  const { __body, ...other } = data;

  const res = await configs.axios.put(path, __body, {
    params: other,
    data: __body,
  });

  return decodeResponseData(res.data);
}

async function remove(path: string, data?: any = {}) {
  const { __body, ...other } = data;

  const res = await configs.axios.delete(path, { params: other, data: __body });

  return decodeResponseData(res.data);
}

/**
 * Gets count info
 */
export function countsGet(): Promise<StatisticDTO> {
  return get("/api/admin/counts");
}

/**
 * Gets environments info
 */
export function environmentsGet(): Promise<EnvironmentDTO> {
  return get("/api/admin/environments");
}

/**
 * Gets halo log file content
 */
export function haloLogfileGet(opt: {
  /**
   * lines
   */
  lines: number;
}): Promise<BaseResponseOfstring> {
  return get("/api/admin/halo/logfile", opt);
}

/**
 * Checks Installation status
 */
export function is_installedGet(): Promise<boolean> {
  return get("/api/admin/is_installed");
}

/**
 * Login
 */
export function loginPost(opt: {
  /**
   * requestBody
   */
  __body: LoginParam;
}): Promise<AuthToken> {
  return post("/api/admin/login", opt);
}

/**
 * Login
 */
export function loginPrecheckPost(opt: {
  /**
   * requestBody
   */
  __body: LoginParam;
}): Promise<LoginPreCheckDTO> {
  return post("/api/admin/login/precheck", opt);
}

/**
 * Logs out (Clear session)
 */
export function logoutPost(): Promise<void> {
  return post("/api/admin/logout");
}

/**
 * Sends reset password verify code
 */
export function passwordCodePost(opt: {
  /**
   * requestBody
   */
  __body: ResetPasswordParam;
}): Promise<void> {
  return post("/api/admin/password/code", opt);
}

/**
 * Resets password by verify code
 */
export function passwordResetPut(opt: {
  /**
   * requestBody
   */
  __body: ResetPasswordParam;
}): Promise<void> {
  return put("/api/admin/password/reset", opt);
}

/**
 * Refreshes token
 */
export function refreshRefreshTokenPost(opt: {
  /**
   * refreshToken
   */
  refreshToken: string;
}): Promise<AuthToken> {
  return post("/api/admin/refresh/{refreshToken}", opt);
}

/**
 * pageBy
 */
export function attachmentsGet(opt?: {
  /**
   *
   */
  attachmentType?:
    | "ALIOSS"
    | "BAIDUBOS"
    | "HUAWEIOBS"
    | "LOCAL"
    | "MINIO"
    | "QINIUOSS"
    | "SMMS"
    | "TENCENTCOS"
    | "UPOSS";

  /**
   *
   */
  keyword?: string;

  /**
   *
   */
  mediaType?: string;

  /**
   *
   */
  page?: number;

  /**
   *
   */
  size?: number;

  /**
   *
   */
  sort?: Array<string>;
}): Promise<CustomizedPageOfAttachmentDTO> {
  return get("/api/admin/attachments", opt);
}

/**
 * Deletes attachments permanently in batch by id array
 */
export function attachmentsRemove(opt: {
  /**
   * requestBody
   */
  __body: Array<number>;
}): Promise<Array<Attachment>> {
  return remove("/api/admin/attachments", opt);
}

/**
 * Lists all of media types
 */
export function attachmentsMedia_typesGet(): Promise<Array<string>> {
  return get("/api/admin/attachments/media_types");
}

/**
 * Lists all of types.
 */
export function attachmentsTypesGet(): Promise<Array<string>> {
  return get("/api/admin/attachments/types");
}

/**
 * Uploads single file
 */
export function attachmentsUploadPost(): Promise<AttachmentDTO> {
  return post("/api/admin/attachments/upload");
}

/**
 * Uploads multi files (Invalid in Swagger UI)
 */
export function attachmentsUploadsPost(): Promise<Array<AttachmentDTO>> {
  return post("/api/admin/attachments/uploads");
}

/**
 * Updates a attachment
 */
export function attachmentsAttachmentIdPut(opt: {
  /**
   * attachmentId
   */
  attachmentId: number;

  /**
   * requestBody
   */
  __body: AttachmentParam;
}): Promise<AttachmentDTO> {
  return put("/api/admin/attachments/{attachmentId}", opt);
}

/**
 * Gets attachment detail by id
 */
export function attachmentsIdGet(opt: {
  /**
   * id
   */
  id: number;
}): Promise<AttachmentDTO> {
  return get("/api/admin/attachments/{id}", opt);
}

/**
 * Deletes attachment permanently by id
 */
export function attachmentsIdRemove(opt: {
  /**
   * id
   */
  id: number;
}): Promise<AttachmentDTO> {
  return remove("/api/admin/attachments/{id}", opt);
}

/**
 * Lists all exported data
 */
export function backupsDataGet(): Promise<Array<BackupDTO>> {
  return get("/api/admin/backups/data");
}

/**
 * Exports all data
 */
export function backupsDataPost(): Promise<BackupDTO> {
  return post("/api/admin/backups/data");
}

/**
 * Deletes a exported data
 */
export function backupsDataRemove(opt: {
  /**
   * filename
   */
  filename: string;
}): Promise<void> {
  return remove("/api/admin/backups/data", opt);
}

/**
 * getDataBackup
 */
export function backupsDataFetchGet(opt: {
  /**
   * filename
   */
  filename: string;
}): Promise<BackupDTO> {
  return get("/api/admin/backups/data/fetch", opt);
}

/**
 * Downloads a exported data
 */
export function backupsDataFileNameGet(opt: {
  /**
   * fileName
   */
  fileName: string;
}): Promise<Resource> {
  return get("/api/admin/backups/data/{fileName}", opt);
}

/**
 * Gets all markdown backups
 */
export function backupsMarkdownExportGet(): Promise<Array<BackupDTO>> {
  return get("/api/admin/backups/markdown/export");
}

/**
 * Exports markdowns
 */
export function backupsMarkdownExportPost(opt: {
  /**
   * requestBody
   */
  __body: PostMarkdownParam;
}): Promise<BackupDTO> {
  return post("/api/admin/backups/markdown/export", opt);
}

/**
 * Deletes a markdown backup
 */
export function backupsMarkdownExportRemove(opt: {
  /**
   * filename
   */
  filename: string;
}): Promise<void> {
  return remove("/api/admin/backups/markdown/export", opt);
}

/**
 * Downloads a work markdown backup file
 */
export function backupsMarkdownExportFileNameGet(opt: {
  /**
   * fileName
   */
  fileName: string;
}): Promise<Resource> {
  return get("/api/admin/backups/markdown/export/{fileName}", opt);
}

/**
 * getMarkdownBackup
 */
export function backupsMarkdownFetchGet(opt: {
  /**
   * filename
   */
  filename: string;
}): Promise<BackupDTO> {
  return get("/api/admin/backups/markdown/fetch", opt);
}

/**
 * Imports markdown
 */
export function backupsMarkdownImportPost(): Promise<BasePostDetailDTO> {
  return post("/api/admin/backups/markdown/import");
}

/**
 * Gets all work directory backups
 */
export function backupsWorkDirGet(): Promise<Array<BackupDTO>> {
  return get("/api/admin/backups/work-dir");
}

/**
 * Backups work directory
 */
export function backupsWorkDirPost(): Promise<BackupDTO> {
  return post("/api/admin/backups/work-dir");
}

/**
 * Deletes a work directory backup
 */
export function backupsWorkDirRemove(opt: {
  /**
   * filename
   */
  filename: string;
}): Promise<void> {
  return remove("/api/admin/backups/work-dir", opt);
}

/**
 * getWorkDirBackup
 */
export function backupsWorkDirFetchGet(opt: {
  /**
   * filename
   */
  filename: string;
}): Promise<BackupDTO> {
  return get("/api/admin/backups/work-dir/fetch", opt);
}

/**
 * Downloads a work directory backup file
 */
export function backupsWorkDirFilenameGet(opt: {
  /**
   * filename
   */
  filename: string;
}): Promise<Resource> {
  return get("/api/admin/backups/work-dir/{filename}", opt);
}

/**
 * Lists all categories
 */
export function categoriesGet(opt?: {
  /**
   *
   */
  sort?: Array<string>;

  /**
   * more
   */
  more?: boolean;
}): Promise<Array<CategoryDTO>> {
  return get("/api/admin/categories", opt);
}

/**
 * Creates category
 */
export function categoriesPost(opt: {
  /**
   * requestBody
   */
  __body: CategoryParam;
}): Promise<CategoryDTO> {
  return post("/api/admin/categories", opt);
}

/**
 * List all categories as tree
 */
export function categoriesTree_viewGet(opt?: {
  /**
   *
   */
  sort?: Array<string>;
}): Promise<Array<CategoryVO>> {
  return get("/api/admin/categories/tree_view", opt);
}

/**
 * Gets category detail
 */
export function categoriesCategoryIdGet(opt: {
  /**
   * categoryId
   */
  categoryId: number;
}): Promise<CategoryDTO> {
  return get("/api/admin/categories/{categoryId}", opt);
}

/**
 * Updates category
 */
export function categoriesCategoryIdPut(opt: {
  /**
   * categoryId
   */
  categoryId: number;

  /**
   * requestBody
   */
  __body: CategoryParam;
}): Promise<CategoryDTO> {
  return put("/api/admin/categories/{categoryId}", opt);
}

/**
 * Deletes category
 */
export function categoriesCategoryIdRemove(opt: {
  /**
   * categoryId
   */
  categoryId: number;
}): Promise<void> {
  return remove("/api/admin/categories/{categoryId}", opt);
}

/**
 * Initializes the blog
 */
export function installationsPost(opt: {
  /**
   * requestBody
   */
  __body: InstallParam;
}): Promise<BaseResponseOfstring> {
  return post("/api/admin/installations", opt);
}

/**
 * Lists journal comments
 */
export function journalsCommentsGet(opt?: {
  /**
   *
   */
  keyword?: string;

  /**
   *
   */
  page?: number;

  /**
   *
   */
  size?: number;

  /**
   *
   */
  sort?: Array<string>;

  /**
   *
   */
  status?: "AUDITING" | "PUBLISHED" | "RECYCLE";
}): Promise<CustomizedPageOfJournalCommentWithJournalVO> {
  return get("/api/admin/journals/comments", opt);
}

/**
 * Creates a journal comment
 */
export function journalsCommentsPost(opt: {
  /**
   * requestBody
   */
  __body: JournalCommentParam;
}): Promise<BaseCommentDTO> {
  return post("/api/admin/journals/comments", opt);
}

/**
 * Lists latest journal comments
 */
export function journalsCommentsLatestGet(opt?: {
  /**
   * top
   */
  top?: number;

  /**
   * status
   */
  status?: "AUDITING" | "PUBLISHED" | "RECYCLE";
}): Promise<Array<JournalCommentWithJournalVO>> {
  return get("/api/admin/journals/comments/latest", opt);
}

/**
 * Deletes comment permanently and recursively
 */
export function journalsCommentsCommentIdRemove(opt: {
  /**
   * commentId
   */
  commentId: number;
}): Promise<BaseCommentDTO> {
  return remove("/api/admin/journals/comments/{commentId}", opt);
}

/**
 * Updates comment status
 */
export function journalsCommentsCommentIdStatusStatusPut(opt: {
  /**
   * commentId
   */
  commentId: number;

  /**
   * status
   */
  status: "AUDITING" | "PUBLISHED" | "RECYCLE";
}): Promise<BaseCommentDTO> {
  return put("/api/admin/journals/comments/{commentId}/status/{status}", opt);
}

/**
 * Lists comment with list view
 */
export function journalsCommentsJournalIdList_viewGet(opt: {
  /**
   * journalId
   */
  journalId: number;

  /**
   *
   */
  sort?: Array<string>;

  /**
   * page
   */
  page?: number;
}): Promise<CustomizedPageOfBaseCommentWithParentVO> {
  return get("/api/admin/journals/comments/{journalId}/list_view", opt);
}

/**
 * Lists comments with tree view
 */
export function journalsCommentsJournalIdTree_viewGet(opt: {
  /**
   * journalId
   */
  journalId: number;

  /**
   *
   */
  sort?: Array<string>;

  /**
   * page
   */
  page?: number;
}): Promise<CustomizedPageOfBaseCommentVO> {
  return get("/api/admin/journals/comments/{journalId}/tree_view", opt);
}

/**
 * Lists journals
 */
export function journalsGet(opt?: {
  /**
   *
   */
  keyword?: string;

  /**
   *
   */
  page?: number;

  /**
   *
   */
  size?: number;

  /**
   *
   */
  sort?: Array<string>;

  /**
   *
   */
  type?: "INTIMATE" | "PUBLIC";
}): Promise<CustomizedPageOfJournalWithCmtCountDTO> {
  return get("/api/admin/journals", opt);
}

/**
 * Creates a journal
 */
export function journalsPost(opt: {
  /**
   * requestBody
   */
  __body: JournalParam;
}): Promise<JournalDTO> {
  return post("/api/admin/journals", opt);
}

/**
 * Gets latest journals
 */
export function journalsLatestGet(opt?: {
  /**
   * top
   */
  top?: number;
}): Promise<Array<JournalWithCmtCountDTO>> {
  return get("/api/admin/journals/latest", opt);
}

/**
 * Updates a Journal
 */
export function journalsIdPut(opt: {
  /**
   * id
   */
  id: number;

  /**
   * requestBody
   */
  __body: JournalParam;
}): Promise<JournalDTO> {
  return put("/api/admin/journals/{id}", opt);
}

/**
 * Delete journal
 */
export function journalsJournalIdRemove(opt: {
  /**
   * journalId
   */
  journalId: number;
}): Promise<JournalDTO> {
  return remove("/api/admin/journals/{journalId}", opt);
}

/**
 * Lists links
 */
export function linksGet(opt?: {
  /**
   *
   */
  sort?: Array<string>;
}): Promise<Array<LinkDTO>> {
  return get("/api/admin/links", opt);
}

/**
 * Creates a link
 */
export function linksPost(opt: {
  /**
   * requestBody
   */
  __body: LinkParam;
}): Promise<LinkDTO> {
  return post("/api/admin/links", opt);
}

/**
 * Lists all link teams
 */
export function linksTeamsGet(): Promise<Array<string>> {
  return get("/api/admin/links/teams");
}

/**
 * Gets link detail by id
 */
export function linksIdGet(opt: {
  /**
   * id
   */
  id: number;
}): Promise<LinkDTO> {
  return get("/api/admin/links/{id}", opt);
}

/**
 * Updates a link
 */
export function linksIdPut(opt: {
  /**
   * id
   */
  id: number;

  /**
   * requestBody
   */
  __body: LinkParam;
}): Promise<LinkDTO> {
  return put("/api/admin/links/{id}", opt);
}

/**
 * Delete link by id
 */
export function linksIdRemove(opt: {
  /**
   * id
   */
  id: number;
}): Promise<void> {
  return remove("/api/admin/links/{id}", opt);
}

/**
 * Lists logs
 */
export function logsGet(opt?: {
  /**
   *
   */
  page?: number;

  /**
   *
   */
  size?: number;

  /**
   *
   */
  sort?: Array<string>;
}): Promise<CustomizedPageOfLogDTO> {
  return get("/api/admin/logs", opt);
}

/**
 * Clears all logs
 */
export function logsClearGet(): Promise<void> {
  return get("/api/admin/logs/clear");
}

/**
 * Pages latest logs
 */
export function logsLatestGet(opt?: {
  /**
   * top
   */
  top?: number;
}): Promise<Array<LogDTO>> {
  return get("/api/admin/logs/latest", opt);
}

/**
 * Tests the SMTP service
 */
export function mailsTestPost(opt: {
  /**
   * requestBody
   */
  __body: MailParam;
}): Promise<BaseResponseOfstring> {
  return post("/api/admin/mails/test", opt);
}

/**
 * Test connection with email server
 */
export function mailsTestConnectionPost(): Promise<BaseResponseOfstring> {
  return post("/api/admin/mails/test/connection");
}

/**
 * Lists all menus
 */
export function menusGet(opt?: {
  /**
   *
   */
  sort?: Array<string>;
}): Promise<Array<MenuDTO>> {
  return get("/api/admin/menus", opt);
}

/**
 * Creates a menu
 */
export function menusPost(opt: {
  /**
   * requestBody
   */
  __body: MenuParam;
}): Promise<MenuDTO> {
  return post("/api/admin/menus", opt);
}

/**
 * updateBatchBy
 */
export function menusBatchPut(opt: {
  /**
   * requestBody
   */
  __body: Array<MenuParam>;
}): Promise<Array<MenuDTO>> {
  return put("/api/admin/menus/batch", opt);
}

/**
 * createBatchBy
 */
export function menusBatchPost(opt: {
  /**
   * requestBody
   */
  __body: Array<MenuParam>;
}): Promise<Array<MenuDTO>> {
  return post("/api/admin/menus/batch", opt);
}

/**
 * deleteBatchBy
 */
export function menusBatchRemove(opt: {
  /**
   * requestBody
   */
  __body: Array<number>;
}): Promise<Array<MenuDTO>> {
  return remove("/api/admin/menus/batch", opt);
}

/**
 * Lists menus as tree by team
 */
export function menusTeamTree_viewGet(opt: {
  /**
   *
   */
  sort?: Array<string>;

  /**
   * team
   */
  team: string;
}): Promise<Array<MenuVO>> {
  return get("/api/admin/menus/team/tree_view", opt);
}

/**
 * Lists all menu teams
 */
export function menusTeamsGet(): Promise<Array<string>> {
  return get("/api/admin/menus/teams");
}

/**
 * Lists menus as tree
 */
export function menusTree_viewGet(opt?: {
  /**
   *
   */
  sort?: Array<string>;
}): Promise<Array<MenuVO>> {
  return get("/api/admin/menus/tree_view", opt);
}

/**
 * Gets menu detail by id
 */
export function menusMenuIdGet(opt: {
  /**
   * menuId
   */
  menuId: number;
}): Promise<MenuDTO> {
  return get("/api/admin/menus/{menuId}", opt);
}

/**
 * Updates a menu
 */
export function menusMenuIdPut(opt: {
  /**
   * menuId
   */
  menuId: number;

  /**
   * requestBody
   */
  __body: MenuParam;
}): Promise<MenuDTO> {
  return put("/api/admin/menus/{menuId}", opt);
}

/**
 * Deletes a menu
 */
export function menusMenuIdRemove(opt: {
  /**
   * menuId
   */
  menuId: number;
}): Promise<MenuDTO> {
  return remove("/api/admin/menus/{menuId}", opt);
}

/**
 * Migrate from Halo
 */
export function migrationsHaloPost(): Promise<void> {
  return post("/api/admin/migrations/halo");
}

/**
 * Lists options
 */
export function optionsGet(): Promise<Array<OptionDTO>> {
  return get("/api/admin/options");
}

/**
 * Creates option
 */
export function optionsPost(opt: {
  /**
   * requestBody
   */
  __body: OptionParam;
}): Promise<void> {
  return post("/api/admin/options", opt);
}

/**
 * Lists all options with list view
 */
export function optionsList_viewGet(opt?: {
  /**
   *
   */
  keyword?: string;

  /**
   *
   */
  page?: number;

  /**
   *
   */
  size?: number;

  /**
   *
   */
  sort?: Array<string>;

  /**
   *
   */
  type?: "CUSTOM" | "INTERNAL";
}): Promise<CustomizedPageOfOptionSimpleDTO> {
  return get("/api/admin/options/list_view", opt);
}

/**
 * Lists all options with map view
 */
export function optionsMap_viewGet(): Promise<any> {
  return get("/api/admin/options/map_view");
}

/**
 * Lists options with map view by keys
 */
export function optionsMap_viewKeysPost(opt: {
  /**
   * requestBody
   */
  __body: Array<string>;
}): Promise<any> {
  return post("/api/admin/options/map_view/keys", opt);
}

/**
 * Saves options by option map
 */
export function optionsMap_viewSavingPost(opt: {
  /**
   * requestBody
   */
  __body: any;
}): Promise<void> {
  return post("/api/admin/options/map_view/saving", opt);
}

/**
 * Saves options
 */
export function optionsSavingPost(opt: {
  /**
   * requestBody
   */
  __body: Array<OptionParam>;
}): Promise<void> {
  return post("/api/admin/options/saving", opt);
}

/**
 * Gets option detail by id
 */
export function optionsIdGet(opt: {
  /**
   * id
   */
  id: number;
}): Promise<OptionSimpleDTO> {
  return get("/api/admin/options/{id}", opt);
}

/**
 * Updates option
 */
export function optionsOptionIdPut(opt: {
  /**
   * optionId
   */
  optionId: number;

  /**
   * requestBody
   */
  __body: OptionParam;
}): Promise<void> {
  return put("/api/admin/options/{optionId}", opt);
}

/**
 * Deletes option
 */
export function optionsOptionIdRemove(opt: {
  /**
   * optionId
   */
  optionId: number;
}): Promise<void> {
  return remove("/api/admin/options/{optionId}", opt);
}

/**
 * Lists photos
 */
export function photosGet(opt?: {
  /**
   *
   */
  keyword?: string;

  /**
   *
   */
  page?: number;

  /**
   *
   */
  size?: number;

  /**
   *
   */
  sort?: Array<string>;

  /**
   *
   */
  team?: string;
}): Promise<CustomizedPageOfPhotoDTO> {
  return get("/api/admin/photos", opt);
}

/**
 * Creates a photo
 */
export function photosPost(opt: {
  /**
   * requestBody
   */
  __body: PhotoParam;
}): Promise<PhotoDTO> {
  return post("/api/admin/photos", opt);
}

/**
 * Lists latest photos
 */
export function photosLatestGet(opt?: {
  /**
   *
   */
  sort?: Array<string>;
}): Promise<Array<PhotoDTO>> {
  return get("/api/admin/photos/latest", opt);
}

/**
 * Lists all of photo teams
 */
export function photosTeamsGet(): Promise<Array<string>> {
  return get("/api/admin/photos/teams");
}

/**
 * Gets photo detail by id
 */
export function photosPhotoIdGet(opt: {
  /**
   * photoId
   */
  photoId: number;
}): Promise<PhotoDTO> {
  return get("/api/admin/photos/{photoId}", opt);
}

/**
 * Updates a photo
 */
export function photosPhotoIdPut(opt: {
  /**
   * photoId
   */
  photoId: number;

  /**
   * requestBody
   */
  __body: PhotoParam;
}): Promise<PhotoDTO> {
  return put("/api/admin/photos/{photoId}", opt);
}

/**
 * Deletes photo by id
 */
export function photosPhotoIdRemove(opt: {
  /**
   * photoId
   */
  photoId: number;
}): Promise<void> {
  return remove("/api/admin/photos/{photoId}", opt);
}

/**
 * Lists post comments
 */
export function postsCommentsGet(opt?: {
  /**
   *
   */
  keyword?: string;

  /**
   *
   */
  page?: number;

  /**
   *
   */
  size?: number;

  /**
   *
   */
  sort?: Array<string>;

  /**
   *
   */
  status?: "AUDITING" | "PUBLISHED" | "RECYCLE";
}): Promise<CustomizedPageOfPostCommentWithPostVO> {
  return get("/api/admin/posts/comments", opt);
}

/**
 * Creates a post comment (new or reply)
 */
export function postsCommentsPost(opt: {
  /**
   * requestBody
   */
  __body: PostCommentParam;
}): Promise<BaseCommentDTO> {
  return post("/api/admin/posts/comments", opt);
}

/**
 * Delete post comments permanently in batch by id array
 */
export function postsCommentsRemove(opt: {
  /**
   * requestBody
   */
  __body: Array<number>;
}): Promise<Array<PostComment>> {
  return remove("/api/admin/posts/comments", opt);
}

/**
 * Pages post latest comments
 */
export function postsCommentsLatestGet(opt?: {
  /**
   * top
   */
  top?: number;

  /**
   * status
   */
  status?: "AUDITING" | "PUBLISHED" | "RECYCLE";
}): Promise<Array<PostCommentWithPostVO>> {
  return get("/api/admin/posts/comments/latest", opt);
}

/**
 * Updates post comment status in batch
 */
export function postsCommentsStatusStatusPut(opt: {
  /**
   * status
   */
  status: "AUDITING" | "PUBLISHED" | "RECYCLE";

  /**
   * requestBody
   */
  __body: Array<number>;
}): Promise<Array<BaseCommentDTO>> {
  return put("/api/admin/posts/comments/status/{status}", opt);
}

/**
 * Gets a post comment by comment id
 */
export function postsCommentsCommentIdGet(opt: {
  /**
   * commentId
   */
  commentId: number;
}): Promise<PostCommentWithPostVO> {
  return get("/api/admin/posts/comments/{commentId}", opt);
}

/**
 * Updates a post comment
 */
export function postsCommentsCommentIdPut(opt: {
  /**
   * commentId
   */
  commentId: number;

  /**
   * requestBody
   */
  __body: PostCommentParam;
}): Promise<BaseCommentDTO> {
  return put("/api/admin/posts/comments/{commentId}", opt);
}

/**
 * Deletes post comment permanently and recursively
 */
export function postsCommentsCommentIdRemove(opt: {
  /**
   * commentId
   */
  commentId: number;
}): Promise<BaseCommentDTO> {
  return remove("/api/admin/posts/comments/{commentId}", opt);
}

/**
 * Updates post comment status
 */
export function postsCommentsCommentIdStatusStatusPut(opt: {
  /**
   * commentId
   */
  commentId: number;

  /**
   * status
   */
  status: "AUDITING" | "PUBLISHED" | "RECYCLE";
}): Promise<BaseCommentDTO> {
  return put("/api/admin/posts/comments/{commentId}/status/{status}", opt);
}

/**
 * Lists post comment with list view
 */
export function postsCommentsPostIdList_viewGet(opt: {
  /**
   * postId
   */
  postId: number;

  /**
   *
   */
  sort?: Array<string>;

  /**
   * page
   */
  page?: number;
}): Promise<CustomizedPageOfBaseCommentWithParentVO> {
  return get("/api/admin/posts/comments/{postId}/list_view", opt);
}

/**
 * Lists post comments with tree view
 */
export function postsCommentsPostIdTree_viewGet(opt: {
  /**
   * postId
   */
  postId: number;

  /**
   *
   */
  sort?: Array<string>;

  /**
   * page
   */
  page?: number;
}): Promise<CustomizedPageOfBaseCommentVO> {
  return get("/api/admin/posts/comments/{postId}/tree_view", opt);
}

/**
 * Lists posts
 */
export function postsGet(opt?: {
  /**
   *
   */
  categoryId?: number;

  /**
   *
   */
  keyword?: string;

  /**
   *
   */
  page?: number;

  /**
   *
   */
  size?: number;

  /**
   *
   */
  sort?: Array<string>;

  /**
   *
   */
  status?: "DRAFT" | "INTIMATE" | "PUBLISHED" | "RECYCLE";

  /**
   * more
   */
  more?: boolean;
}): Promise<CustomizedPageOfBasePostSimpleDTO> {
  return get("/api/admin/posts", opt);
}

/**
 * Creates a post
 */
export function postsPost(opt: {
  /**
   * autoSave
   */
  autoSave?: boolean;

  /**
   * requestBody
   */
  __body: PostParam;
}): Promise<PostDetailVO> {
  return post("/api/admin/posts", opt);
}

/**
 * Deletes posts permanently in batch by id array
 */
export function postsRemove(opt: {
  /**
   * requestBody
   */
  __body: Array<number>;
}): Promise<Array<Post>> {
  return remove("/api/admin/posts", opt);
}

/**
 * Pages latest post
 */
export function postsLatestGet(opt?: {
  /**
   * top
   */
  top?: number;
}): Promise<Array<BasePostMinimalDTO>> {
  return get("/api/admin/posts/latest", opt);
}

/**
 * Gets a post preview link
 */
export function postsPreviewPostIdGet(opt: {
  /**
   * postId
   */
  postId: number;
}): Promise<string> {
  return get("/api/admin/posts/preview/{postId}", opt);
}

/**
 * Gets a page of post by post status
 */
export function postsStatusStatusGet(opt: {
  /**
   *
   */
  page?: number;

  /**
   *
   */
  size?: number;

  /**
   *
   */
  sort?: Array<string>;

  /**
   * status
   */
  status: "DRAFT" | "INTIMATE" | "PUBLISHED" | "RECYCLE";

  /**
   * more
   */
  more?: boolean;
}): Promise<CustomizedPageOfBasePostSimpleDTO> {
  return get("/api/admin/posts/status/{status}", opt);
}

/**
 * Updates post status in batch
 */
export function postsStatusStatusPut(opt: {
  /**
   * status
   */
  status: "DRAFT" | "INTIMATE" | "PUBLISHED" | "RECYCLE";

  /**
   * requestBody
   */
  __body: Array<number>;
}): Promise<Array<Post>> {
  return put("/api/admin/posts/status/{status}", opt);
}

/**
 * Gets a post
 */
export function postsPostIdGet(opt: {
  /**
   * postId
   */
  postId: number;
}): Promise<PostDetailVO> {
  return get("/api/admin/posts/{postId}", opt);
}

/**
 * Updates a post
 */
export function postsPostIdPut(opt: {
  /**
   * postId
   */
  postId: number;

  /**
   * autoSave
   */
  autoSave?: boolean;

  /**
   * requestBody
   */
  __body: PostParam;
}): Promise<PostDetailVO> {
  return put("/api/admin/posts/{postId}", opt);
}

/**
 * Deletes a photo permanently
 */
export function postsPostIdRemove(opt: {
  /**
   * postId
   */
  postId: number;
}): Promise<void> {
  return remove("/api/admin/posts/{postId}", opt);
}

/**
 * Likes a post
 */
export function postsPostIdLikesPut(opt: {
  /**
   * postId
   */
  postId: number;
}): Promise<void> {
  return put("/api/admin/posts/{postId}/likes", opt);
}

/**
 * Gets a post preview link
 */
export function postsPostIdPreviewGet(opt: {
  /**
   * postId
   */
  postId: number;
}): Promise<string> {
  return get("/api/admin/posts/{postId}/preview", opt);
}

/**
 * Updates draft
 */
export function postsPostIdStatusDraftContentPut(opt: {
  /**
   * postId
   */
  postId: number;

  /**
   * requestBody
   */
  __body: PostContentParam;
}): Promise<BasePostDetailDTO> {
  return put("/api/admin/posts/{postId}/status/draft/content", opt);
}

/**
 * Updates post status
 */
export function postsPostIdStatusStatusPut(opt: {
  /**
   * postId
   */
  postId: number;

  /**
   * status
   */
  status: "DRAFT" | "INTIMATE" | "PUBLISHED" | "RECYCLE";
}): Promise<BasePostMinimalDTO> {
  return put("/api/admin/posts/{postId}/status/{status}", opt);
}

/**
 * Lists sheet comments
 */
export function sheetsCommentsGet(opt?: {
  /**
   *
   */
  keyword?: string;

  /**
   *
   */
  page?: number;

  /**
   *
   */
  size?: number;

  /**
   *
   */
  sort?: Array<string>;

  /**
   *
   */
  status?: "AUDITING" | "PUBLISHED" | "RECYCLE";
}): Promise<CustomizedPageOfSheetCommentWithSheetVO> {
  return get("/api/admin/sheets/comments", opt);
}

/**
 * Creates a sheet comment (new or reply)
 */
export function sheetsCommentsPost(opt: {
  /**
   * requestBody
   */
  __body: SheetCommentParam;
}): Promise<BaseCommentDTO> {
  return post("/api/admin/sheets/comments", opt);
}

/**
 * Deletes sheet comments permanently in batch by id array
 */
export function sheetsCommentsRemove(opt: {
  /**
   * requestBody
   */
  __body: Array<number>;
}): Promise<Array<SheetComment>> {
  return remove("/api/admin/sheets/comments", opt);
}

/**
 * Lists latest sheet comments
 */
export function sheetsCommentsLatestGet(opt?: {
  /**
   * top
   */
  top?: number;

  /**
   * status
   */
  status?: "AUDITING" | "PUBLISHED" | "RECYCLE";
}): Promise<Array<SheetCommentWithSheetVO>> {
  return get("/api/admin/sheets/comments/latest", opt);
}

/**
 * Updates sheet comment status in batch
 */
export function sheetsCommentsStatusStatusPut(opt: {
  /**
   * status
   */
  status: "AUDITING" | "PUBLISHED" | "RECYCLE";

  /**
   * requestBody
   */
  __body: Array<number>;
}): Promise<Array<BaseCommentDTO>> {
  return put("/api/admin/sheets/comments/status/{status}", opt);
}

/**
 * Gets a sheet comment by comment id
 */
export function sheetsCommentsCommentIdGet(opt: {
  /**
   * commentId
   */
  commentId: number;
}): Promise<SheetCommentWithSheetVO> {
  return get("/api/admin/sheets/comments/{commentId}", opt);
}

/**
 * Updates a sheet comment
 */
export function sheetsCommentsCommentIdPut(opt: {
  /**
   * commentId
   */
  commentId: number;

  /**
   * requestBody
   */
  __body: SheetCommentParam;
}): Promise<BaseCommentDTO> {
  return put("/api/admin/sheets/comments/{commentId}", opt);
}

/**
 * Deletes sheet comment permanently and recursively
 */
export function sheetsCommentsCommentIdRemove(opt: {
  /**
   * commentId
   */
  commentId: number;
}): Promise<BaseCommentDTO> {
  return remove("/api/admin/sheets/comments/{commentId}", opt);
}

/**
 * Updates sheet comment status
 */
export function sheetsCommentsCommentIdStatusStatusPut(opt: {
  /**
   * commentId
   */
  commentId: number;

  /**
   * status
   */
  status: "AUDITING" | "PUBLISHED" | "RECYCLE";
}): Promise<BaseCommentDTO> {
  return put("/api/admin/sheets/comments/{commentId}/status/{status}", opt);
}

/**
 * Lists sheet comment with list view
 */
export function sheetsCommentsSheetIdList_viewGet(opt: {
  /**
   * sheetId
   */
  sheetId: number;

  /**
   *
   */
  sort?: Array<string>;

  /**
   * page
   */
  page?: number;
}): Promise<CustomizedPageOfBaseCommentWithParentVO> {
  return get("/api/admin/sheets/comments/{sheetId}/list_view", opt);
}

/**
 * Lists sheet comments with tree view
 */
export function sheetsCommentsSheetIdTree_viewGet(opt: {
  /**
   * sheetId
   */
  sheetId: number;

  /**
   *
   */
  sort?: Array<string>;

  /**
   * page
   */
  page?: number;
}): Promise<CustomizedPageOfBaseCommentVO> {
  return get("/api/admin/sheets/comments/{sheetId}/tree_view", opt);
}

/**
 * Gets a page of sheet
 */
export function sheetsGet(opt?: {
  /**
   *
   */
  page?: number;

  /**
   *
   */
  size?: number;

  /**
   *
   */
  sort?: Array<string>;
}): Promise<CustomizedPageOfSheetListVO> {
  return get("/api/admin/sheets", opt);
}

/**
 * Creates a sheet
 */
export function sheetsPost(opt: {
  /**
   * autoSave
   */
  autoSave?: boolean;

  /**
   * requestBody
   */
  __body: SheetParam;
}): Promise<SheetDetailVO> {
  return post("/api/admin/sheets", opt);
}

/**
 * Lists independent sheets
 */
export function sheetsIndependentGet(): Promise<Array<IndependentSheetDTO>> {
  return get("/api/admin/sheets/independent");
}

/**
 * Gets a sheet preview link
 */
export function sheetsPreviewSheetIdGet(opt: {
  /**
   * sheetId
   */
  sheetId: number;
}): Promise<string> {
  return get("/api/admin/sheets/preview/{sheetId}", opt);
}

/**
 * Gets a sheet
 */
export function sheetsSheetIdGet(opt: {
  /**
   * sheetId
   */
  sheetId: number;
}): Promise<SheetDetailVO> {
  return get("/api/admin/sheets/{sheetId}", opt);
}

/**
 * Updates a sheet
 */
export function sheetsSheetIdPut(opt: {
  /**
   * sheetId
   */
  sheetId: number;

  /**
   * autoSave
   */
  autoSave?: boolean;

  /**
   * requestBody
   */
  __body: SheetParam;
}): Promise<SheetDetailVO> {
  return put("/api/admin/sheets/{sheetId}", opt);
}

/**
 * Deletes a sheet
 */
export function sheetsSheetIdRemove(opt: {
  /**
   * sheetId
   */
  sheetId: number;
}): Promise<SheetDetailVO> {
  return remove("/api/admin/sheets/{sheetId}", opt);
}

/**
 * Updates draft
 */
export function sheetsSheetIdStatusDraftContentPut(opt: {
  /**
   * sheetId
   */
  sheetId: number;

  /**
   * requestBody
   */
  __body: PostContentParam;
}): Promise<BasePostDetailDTO> {
  return put("/api/admin/sheets/{sheetId}/status/draft/content", opt);
}

/**
 * Updates a sheet
 */
export function sheetsSheetIdStatusPut(opt: {
  /**
   * sheetId
   */
  sheetId: number;

  /**
   * status
   */
  status: "DRAFT" | "INTIMATE" | "PUBLISHED" | "RECYCLE";
}): Promise<void> {
  return put("/api/admin/sheets/{sheetId}/{status}", opt);
}

/**
 * Lists static files
 */
export function staticsGet(): Promise<Array<StaticFile>> {
  return get("/api/admin/statics");
}

/**
 * Creates a folder
 */
export function staticsPost(opt: {
  /**
   * basePath
   */
  basePath?: string;

  /**
   * folderName
   */
  folderName: string;
}): Promise<void> {
  return post("/api/admin/statics", opt);
}

/**
 * Deletes file by relative path
 */
export function staticsRemove(opt: {
  /**
   * path
   */
  path: string;
}): Promise<void> {
  return remove("/api/admin/statics", opt);
}

/**
 * Save static file
 */
export function staticsFilesPut(opt: {
  /**
   * requestBody
   */
  __body: StaticContentParam;
}): Promise<void> {
  return put("/api/admin/statics/files", opt);
}

/**
 * Renames static file
 */
export function staticsRenamePost(opt?: {
  /**
   * basePath
   */
  basePath?: string;

  /**
   * newName
   */
  newName?: string;
}): Promise<void> {
  return post("/api/admin/statics/rename", opt);
}

/**
 * Uploads static file
 */
export function staticsUploadPost(opt?: {
  /**
   * basePath
   */
  basePath?: string;
}): Promise<void> {
  return post("/api/admin/statics/upload", opt);
}

/**
 * Gets blog statistics.
 */
export function statisticsGet(): Promise<StatisticDTO> {
  return get("/api/admin/statistics");
}

/**
 * Gets blog statistics with user
 */
export function statisticsUserGet(): Promise<StatisticWithUserDTO> {
  return get("/api/admin/statistics/user");
}

/**
 * Lists tags
 */
export function tagsGet(opt?: {
  /**
   *
   */
  sort?: Array<string>;

  /**
   * Return more information(post count) if it is set
   */
  more?: boolean;
}): Promise<Array<TagDTO>> {
  return get("/api/admin/tags", opt);
}

/**
 * Creates a tag
 */
export function tagsPost(opt: {
  /**
   * requestBody
   */
  __body: TagParam;
}): Promise<TagDTO> {
  return post("/api/admin/tags", opt);
}

/**
 * Gets tag detail by id
 */
export function tagsTagIdGet(opt: {
  /**
   * tagId
   */
  tagId: number;
}): Promise<TagDTO> {
  return get("/api/admin/tags/{tagId}", opt);
}

/**
 * Updates a tag
 */
export function tagsTagIdPut(opt: {
  /**
   * tagId
   */
  tagId: number;

  /**
   * requestBody
   */
  __body: TagParam;
}): Promise<TagDTO> {
  return put("/api/admin/tags/{tagId}", opt);
}

/**
 * Deletes a tag
 */
export function tagsTagIdRemove(opt: {
  /**
   * tagId
   */
  tagId: number;
}): Promise<TagDTO> {
  return remove("/api/admin/tags/{tagId}", opt);
}

/**
 * Lists all themes
 */
export function themesGet(): Promise<Array<ThemeProperty>> {
  return get("/api/admin/themes");
}

/**
 * Gets activate theme
 */
export function themesActivationGet(): Promise<ThemeProperty> {
  return get("/api/admin/themes/activation");
}

/**
 * Fetches activated theme configuration
 */
export function themesActivationConfigurationsGet(): Promise<BaseResponseOfobject> {
  return get("/api/admin/themes/activation/configurations");
}

/**
 * Lists all activate theme files
 */
export function themesActivationFilesGet(): Promise<Array<ThemeFile>> {
  return get("/api/admin/themes/activation/files");
}

/**
 * Lists activated theme settings
 */
export function themesActivationSettingsGet(): Promise<any> {
  return get("/api/admin/themes/activation/settings");
}

/**
 * Saves theme settings
 */
export function themesActivationSettingsPost(opt: {
  /**
   * requestBody
   */
  __body: any;
}): Promise<void> {
  return post("/api/admin/themes/activation/settings", opt);
}

/**
 * Gets custom post templates
 */
export function themesActivationTemplateCustomPostGet(): Promise<
  Array<string>
> {
  return get("/api/admin/themes/activation/template/custom/post");
}

/**
 * Gets custom sheet templates
 */
export function themesActivationTemplateCustomSheetGet(): Promise<
  Array<string>
> {
  return get("/api/admin/themes/activation/template/custom/sheet");
}

/**
 * Determines if template exists
 */
export function themesActivationTemplateExistsGet(opt: {
  /**
   * template
   */
  template: string;
}): Promise<BaseResponseOfboolean> {
  return get("/api/admin/themes/activation/template/exists", opt);
}

/**
 * Fetch specific branch
 */
export function themesFetchBranchGet(opt: {
  /**
   * uri
   */
  uri: string;

  /**
   * branch
   */
  branch: string;
}): Promise<ThemeProperty> {
  return get("/api/admin/themes/fetchBranch", opt);
}

/**
 * Fetch latest release
 */
export function themesFetchLatestReleaseGet(opt: {
  /**
   * uri
   */
  uri: string;
}): Promise<ThemeProperty> {
  return get("/api/admin/themes/fetchLatestRelease", opt);
}

/**
 * Fetches a new theme
 */
export function themesFetchingPost(opt: {
  /**
   * uri
   */
  uri: string;
}): Promise<ThemeProperty> {
  return post("/api/admin/themes/fetching", opt);
}

/**
 * Fetches all branches
 */
export function themesFetchingGitBranchesPost(opt: {
  /**
   * uri
   */
  uri: string;
}): Promise<Array<ThemeProperty>> {
  return post("/api/admin/themes/fetching/git/branches", opt);
}

/**
 * Upgrades theme from remote
 */
export function themesFetchingThemeIdPut(opt: {
  /**
   * themeId
   */
  themeId: string;
}): Promise<ThemeProperty> {
  return put("/api/admin/themes/fetching/{themeId}", opt);
}

/**
 * Fetches all branches
 */
export function themesFetchingBranchesPost(opt: {
  /**
   * uri
   */
  uri: string;
}): Promise<Array<ThemeProperty>> {
  return post("/api/admin/themes/fetchingBranches", opt);
}

/**
 * Fetches a specific release
 */
export function themesFetchingReleaseGet(opt: {
  /**
   * uri
   */
  uri: string;

  /**
   * tag
   */
  tag: string;
}): Promise<ThemeProperty> {
  return get("/api/admin/themes/fetchingRelease", opt);
}

/**
 * Fetches all releases
 */
export function themesFetchingReleasesPost(opt: {
  /**
   * uri
   */
  uri: string;
}): Promise<Array<ThemeProperty>> {
  return post("/api/admin/themes/fetchingReleases", opt);
}

/**
 * Gets template content
 */
export function themesFilesContentGet(opt: {
  /**
   * path
   */
  path: string;
}): Promise<BaseResponseOfstring> {
  return get("/api/admin/themes/files/content", opt);
}

/**
 * Updates template content
 */
export function themesFilesContentPut(opt: {
  /**
   * requestBody
   */
  __body: ThemeContentParam;
}): Promise<void> {
  return put("/api/admin/themes/files/content", opt);
}

/**
 * Reloads themes
 */
export function themesReloadPost(): Promise<void> {
  return post("/api/admin/themes/reload");
}

/**
 * Uploads a theme
 */
export function themesUploadPost(): Promise<ThemeProperty> {
  return post("/api/admin/themes/upload");
}

/**
 * Upgrades theme by file
 */
export function themesUploadThemeIdPut(opt: {
  /**
   * themeId
   */
  themeId: string;
}): Promise<ThemeProperty> {
  return put("/api/admin/themes/upload/{themeId}", opt);
}

/**
 * Gets theme property by theme id
 */
export function themesThemeIdGet(opt: {
  /**
   * themeId
   */
  themeId: string;
}): Promise<ThemeProperty> {
  return get("/api/admin/themes/{themeId}", opt);
}

/**
 * Deletes a theme
 */
export function themesThemeIdRemove(opt: {
  /**
   * themeId
   */
  themeId: string;

  /**
   * deleteSettings
   */
  deleteSettings?: boolean;
}): Promise<void> {
  return remove("/api/admin/themes/{themeId}", opt);
}

/**
 * Activates a theme
 */
export function themesThemeIdActivationPost(opt: {
  /**
   * themeId
   */
  themeId: string;
}): Promise<ThemeProperty> {
  return post("/api/admin/themes/{themeId}/activation", opt);
}

/**
 * Fetches theme configuration by theme id
 */
export function themesThemeIdConfigurationsGet(opt: {
  /**
   * themeId
   */
  themeId: string;
}): Promise<Array<Group>> {
  return get("/api/admin/themes/{themeId}/configurations", opt);
}

/**
 * Lists theme files by theme id
 */
export function themesThemeIdFilesGet(opt: {
  /**
   * themeId
   */
  themeId: string;
}): Promise<Array<ThemeFile>> {
  return get("/api/admin/themes/{themeId}/files", opt);
}

/**
 * Gets template content by theme id
 */
export function themesThemeIdFilesContentGet(opt: {
  /**
   * themeId
   */
  themeId: string;

  /**
   * path
   */
  path: string;
}): Promise<BaseResponseOfstring> {
  return get("/api/admin/themes/{themeId}/files/content", opt);
}

/**
 * Updates template content by theme id
 */
export function themesThemeIdFilesContentPut(opt: {
  /**
   * themeId
   */
  themeId: string;

  /**
   * requestBody
   */
  __body: ThemeContentParam;
}): Promise<void> {
  return put("/api/admin/themes/{themeId}/files/content", opt);
}

/**
 * Lists theme settings by theme id
 */
export function themesThemeIdSettingsGet(opt: {
  /**
   * themeId
   */
  themeId: string;
}): Promise<any> {
  return get("/api/admin/themes/{themeId}/settings", opt);
}

/**
 * Saves theme settings
 */
export function themesThemeIdSettingsPost(opt: {
  /**
   * themeId
   */
  themeId: string;

  /**
   * requestBody
   */
  __body: any;
}): Promise<void> {
  return post("/api/admin/themes/{themeId}/settings", opt);
}

/**
 * Generate Multi-Factor Auth qr image
 */
export function usersMfaGeneratePut(opt: {
  /**
   * requestBody
   */
  __body: MultiFactorAuthParam;
}): Promise<MultiFactorAuthVO> {
  return put("/api/admin/users/mfa/generate", opt);
}

/**
 * Updates user's Multi Factor Auth
 */
export function usersMfaUpdatePut(opt: {
  /**
   * requestBody
   */
  __body: MultiFactorAuthParam;
}): Promise<MultiFactorAuthVO> {
  return put("/api/admin/users/mfa/update", opt);
}

/**
 * Gets user profile
 */
export function usersProfilesGet(): Promise<UserDTO> {
  return get("/api/admin/users/profiles");
}

/**
 * Updates user profile
 */
export function usersProfilesPut(opt: {
  /**
   * requestBody
   */
  __body: UserParam;
}): Promise<UserDTO> {
  return put("/api/admin/users/profiles", opt);
}

/**
 * Updates user's password
 */
export function usersProfilesPasswordPut(opt: {
  /**
   * requestBody
   */
  __body: PasswordParam;
}): Promise<BaseResponseOfstring> {
  return put("/api/admin/users/profiles/password", opt);
}
