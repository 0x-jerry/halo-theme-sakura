/**
 * Do not edit this file, this file is auto generate by script.
 * */

import {
  ArchiveMonthVO,
  ArchiveYearVO,
  Author,
  BaseCommentDTO,
  BaseCommentVO,
  BaseCommentWithParentVO,
  BaseMetaDTO,
  BasePostSimpleDTO,
  BaseResponseobject,
  CategoryDTO,
  CommentWithHasChildrenVO,
  JournalCommentParam,
  JournalDTO,
  JournalWithCmtCountDTO,
  LinkDTO,
  LinkTeamVO,
  MenuDTO,
  MenuVO,
  OptionDTO,
  Pageable,
  PageBaseCommentVO,
  PageBaseCommentWithParentVO,
  PageBasePostSimpleDTO,
  PageCommentWithHasChildrenVO,
  PageJournalWithCmtCountDTO,
  PagePhotoDTO,
  PagePostListVO,
  PageSheetListVO,
  PhotoDTO,
  PostCommentParam,
  PostDetailVO,
  PostListVO,
  SheetCommentParam,
  SheetDetailVO,
  SheetListVO,
  Sort,
  StatisticDTO,
  StatisticWithUserDTO,
  TagDTO,
  ThemeProperty,
  UserDTO,
} from './contentApiDefine'

import * as R from '../request'

export const api = {
  /**
   * listMonthArchives
   */
  archivesMonthsGet(): Promise<Array<ArchiveMonthVO>> {
    return R.get('/api/content/archives/months')
  },
  /**
   * listYearArchives
   */
  archivesYearsGet(): Promise<Array<ArchiveYearVO>> {
    return R.get('/api/content/archives/years')
  },
  /**
   * Lists categories
   */
  categoriesGet(opt: {
    /**
     * more
     */
    more?: boolean

    /**
     *
     */
    sort?: Array<string>
  }): Promise<Array<CategoryDTO>> {
    return R.get('/api/content/categories', opt)
  },
  /**
   * Lists posts by category slug
   */
  categoriesSlugPostsGet(opt: {
    /**
     *
     */
    page?: number

    /**
     *
     */
    size?: number

    /**
     * slug
     */
    slug: string

    /**
     *
     */
    sort?: Array<string>
  }): Promise<PagePostListVO> {
    return R.get('/api/content/categories/{slug}/posts', opt)
  },
  /**
   * Lists journals
   */
  journalsGet(opt: {
    /**
     *
     */
    page?: number

    /**
     *
     */
    size?: number

    /**
     *
     */
    sort?: Array<string>
  }): Promise<PageJournalWithCmtCountDTO> {
    return R.get('/api/content/journals', opt)
  },
  /**
   * Comments a post
   */
  journalsCommentsPost(opt: {
    /**
     * journalCommentParam
     */
    journalCommentParam: any
  }): Promise<BaseCommentDTO> {
    return R.post('/api/content/journals/comments', opt)
  },
  /**
   * Likes a journal
   */
  journalsIdLikesPost(opt: {
    /**
     * id
     */
    id: number
  }): Promise<void> {
    return R.post('/api/content/journals/{id}/likes', opt)
  },
  /**
   * Gets a journal detail
   */
  journalsJournalIdGet(opt: {
    /**
     * journalId
     */
    journalId: number
  }): Promise<JournalDTO> {
    return R.get('/api/content/journals/{journalId}', opt)
  },
  /**
   * Lists comment with list view
   */
  journalsJournalIdCommentsList_viewGet(opt: {
    /**
     * journalId
     */
    journalId: number

    /**
     * page
     */
    page?: number

    /**
     *
     */
    sort?: Array<string>
  }): Promise<PageBaseCommentWithParentVO> {
    return R.get('/api/content/journals/{journalId}/comments/list_view', opt)
  },
  /**
   * listTopComments
   */
  journalsJournalIdCommentsTop_viewGet(opt: {
    /**
     * journalId
     */
    journalId: number

    /**
     * page
     */
    page?: number

    /**
     *
     */
    sort?: Array<string>
  }): Promise<PageCommentWithHasChildrenVO> {
    return R.get('/api/content/journals/{journalId}/comments/top_view', opt)
  },
  /**
   * Lists comments with tree view
   */
  journalsJournalIdCommentsTree_viewGet(opt: {
    /**
     * journalId
     */
    journalId: number

    /**
     * page
     */
    page?: number

    /**
     *
     */
    sort?: Array<string>
  }): Promise<PageBaseCommentVO> {
    return R.get('/api/content/journals/{journalId}/comments/tree_view', opt)
  },
  /**
   * listChildrenBy
   */
  journalsJournalIdCommentsCommentParentIdChildrenGet(opt: {
    /**
     * commentParentId
     */
    commentParentId: number

    /**
     * journalId
     */
    journalId: number

    /**
     *
     */
    sort?: Array<string>
  }): Promise<Array<BaseCommentDTO>> {
    return R.get(
      '/api/content/journals/{journalId}/comments/{commentParentId}/children',
      opt
    )
  },
  /**
   * List all links
   */
  linksGet(opt: {
    /**
     *
     */
    sort?: Array<string>
  }): Promise<Array<LinkDTO>> {
    return R.get('/api/content/links', opt)
  },
  /**
   * List all links with team view
   */
  linksTeam_viewGet(opt: {
    /**
     *
     */
    sort?: Array<string>
  }): Promise<Array<LinkTeamVO>> {
    return R.get('/api/content/links/team_view', opt)
  },
  /**
   * Lists all menus
   */
  menusGet(opt: {
    /**
     *
     */
    sort?: Array<string>
  }): Promise<Array<MenuDTO>> {
    return R.get('/api/content/menus', opt)
  },
  /**
   * Lists menus with tree view
   */
  menusTree_viewGet(opt: {
    /**
     *
     */
    sort?: Array<string>
  }): Promise<Array<MenuVO>> {
    return R.get('/api/content/menus/tree_view', opt)
  },
  /**
   * Options for comment
   */
  optionsCommentGet(): Promise<any> {
    return R.get('/api/content/options/comment')
  },
  /**
   * Gets option value by option key
   */
  optionsKeysKeyGet(opt: {
    /**
     * key
     */
    key: string
  }): Promise<BaseResponseobject> {
    return R.get('/api/content/options/keys/{key}', opt)
  },
  /**
   * Lists all options with list view
   */
  optionsList_viewGet(): Promise<Array<OptionDTO>> {
    return R.get('/api/content/options/list_view')
  },
  /**
   * Lists options with map view
   */
  optionsMap_viewGet(opt: {
    /**
     * key
     */
    key?: Array<string>
  }): Promise<any> {
    return R.get('/api/content/options/map_view', opt)
  },
  /**
   * pageBy
   */
  photosGet(opt: {
    /**
     *
     */
    keyword?: string

    /**
     *
     */
    page?: number

    /**
     *
     */
    size?: number

    /**
     *
     */
    sort?: Array<string>

    /**
     *
     */
    team?: string
  }): Promise<PagePhotoDTO> {
    return R.get('/api/content/photos', opt)
  },
  /**
   * listPhotos
   */
  photosLatestGet(opt: {
    /**
     *
     */
    sort?: Array<string>
  }): Promise<Array<PhotoDTO>> {
    return R.get('/api/content/photos/latest', opt)
  },
  /**
   * Lists posts
   */
  postsGet(opt: {
    /**
     *
     */
    page?: number

    /**
     *
     */
    size?: number

    /**
     *
     */
    sort?: Array<string>
  }): Promise<PagePostListVO> {
    return R.get('/api/content/posts', opt)
  },
  /**
   * Comments a post
   */
  postsCommentsPost(opt: {
    /**
     * postCommentParam
     */
    postCommentParam: any
  }): Promise<BaseCommentDTO> {
    return R.post('/api/content/posts/comments', opt)
  },
  /**
   * Lists posts by keyword
   */
  postsSearchPost(opt: {
    /**
     * keyword
     */
    keyword: string

    /**
     *
     */
    page?: number

    /**
     *
     */
    size?: number

    /**
     *
     */
    sort?: Array<string>
  }): Promise<PageBasePostSimpleDTO> {
    return R.post('/api/content/posts/search', opt)
  },
  /**
   * Gets a post
   */
  postsSlugGet(opt: {
    /**
     * formatDisabled
     */
    formatDisabled?: boolean

    /**
     * slug
     */
    slug: string

    /**
     * sourceDisabled
     */
    sourceDisabled?: boolean
  }): Promise<PostDetailVO> {
    return R.get('/api/content/posts/slug', opt)
  },
  /**
   * Gets a post
   */
  postsPostIdGet(opt: {
    /**
     * formatDisabled
     */
    formatDisabled?: boolean

    /**
     * postId
     */
    postId: number

    /**
     * sourceDisabled
     */
    sourceDisabled?: boolean
  }): Promise<PostDetailVO> {
    return R.get('/api/content/posts/{postId}', opt)
  },
  /**
   * Lists comment with list view
   */
  postsPostIdCommentsList_viewGet(opt: {
    /**
     * page
     */
    page?: number

    /**
     * postId
     */
    postId: number

    /**
     *
     */
    sort?: Array<string>
  }): Promise<PageBaseCommentWithParentVO> {
    return R.get('/api/content/posts/{postId}/comments/list_view', opt)
  },
  /**
   * listTopComments
   */
  postsPostIdCommentsTop_viewGet(opt: {
    /**
     * page
     */
    page?: number

    /**
     * postId
     */
    postId: number

    /**
     *
     */
    sort?: Array<string>
  }): Promise<PageCommentWithHasChildrenVO> {
    return R.get('/api/content/posts/{postId}/comments/top_view', opt)
  },
  /**
   * Lists comments with tree view
   */
  postsPostIdCommentsTree_viewGet(opt: {
    /**
     * page
     */
    page?: number

    /**
     * postId
     */
    postId: number

    /**
     *
     */
    sort?: Array<string>
  }): Promise<PageBaseCommentVO> {
    return R.get('/api/content/posts/{postId}/comments/tree_view', opt)
  },
  /**
   * listChildrenBy
   */
  postsPostIdCommentsCommentParentIdChildrenGet(opt: {
    /**
     * commentParentId
     */
    commentParentId: number

    /**
     * postId
     */
    postId: number

    /**
     *
     */
    sort?: Array<string>
  }): Promise<Array<BaseCommentDTO>> {
    return R.get(
      '/api/content/posts/{postId}/comments/{commentParentId}/children',
      opt
    )
  },
  /**
   * Likes a post
   */
  postsPostIdLikesPost(opt: {
    /**
     * postId
     */
    postId: number
  }): Promise<void> {
    return R.post('/api/content/posts/{postId}/likes', opt)
  },
  /**
   * Gets next post by current post id.
   */
  postsPostIdNextGet(opt: {
    /**
     * postId
     */
    postId: number
  }): Promise<PostDetailVO> {
    return R.get('/api/content/posts/{postId}/next', opt)
  },
  /**
   * Gets previous post by current post id.
   */
  postsPostIdPrevGet(opt: {
    /**
     * postId
     */
    postId: number
  }): Promise<PostDetailVO> {
    return R.get('/api/content/posts/{postId}/prev', opt)
  },
  /**
   * Lists sheets
   */
  sheetsGet(opt: {
    /**
     *
     */
    page?: number

    /**
     *
     */
    size?: number

    /**
     *
     */
    sort?: Array<string>
  }): Promise<PageSheetListVO> {
    return R.get('/api/content/sheets', opt)
  },
  /**
   * Comments a post
   */
  sheetsCommentsPost(opt: {
    /**
     * sheetCommentParam
     */
    sheetCommentParam: any
  }): Promise<BaseCommentDTO> {
    return R.post('/api/content/sheets/comments', opt)
  },
  /**
   * Gets a sheet by slug
   */
  sheetsSlugGet(opt: {
    /**
     * formatDisabled
     */
    formatDisabled?: boolean

    /**
     * slug
     */
    slug: string

    /**
     * sourceDisabled
     */
    sourceDisabled?: boolean
  }): Promise<SheetDetailVO> {
    return R.get('/api/content/sheets/slug', opt)
  },
  /**
   * Gets a sheet
   */
  sheetsSheetIdGet(opt: {
    /**
     * formatDisabled
     */
    formatDisabled?: boolean

    /**
     * sheetId
     */
    sheetId: number

    /**
     * sourceDisabled
     */
    sourceDisabled?: boolean
  }): Promise<SheetDetailVO> {
    return R.get('/api/content/sheets/{sheetId}', opt)
  },
  /**
   * Lists comment with list view
   */
  sheetsSheetIdCommentsList_viewGet(opt: {
    /**
     * page
     */
    page?: number

    /**
     * sheetId
     */
    sheetId: number

    /**
     *
     */
    sort?: Array<string>
  }): Promise<PageBaseCommentWithParentVO> {
    return R.get('/api/content/sheets/{sheetId}/comments/list_view', opt)
  },
  /**
   * listTopComments
   */
  sheetsSheetIdCommentsTop_viewGet(opt: {
    /**
     * page
     */
    page?: number

    /**
     * sheetId
     */
    sheetId: number

    /**
     *
     */
    sort?: Array<string>
  }): Promise<PageCommentWithHasChildrenVO> {
    return R.get('/api/content/sheets/{sheetId}/comments/top_view', opt)
  },
  /**
   * Lists comments with tree view
   */
  sheetsSheetIdCommentsTree_viewGet(opt: {
    /**
     * page
     */
    page?: number

    /**
     * sheetId
     */
    sheetId: number

    /**
     *
     */
    sort?: Array<string>
  }): Promise<PageBaseCommentVO> {
    return R.get('/api/content/sheets/{sheetId}/comments/tree_view', opt)
  },
  /**
   * listChildrenBy
   */
  sheetsSheetIdCommentsCommentParentIdChildrenGet(opt: {
    /**
     * commentParentId
     */
    commentParentId: number

    /**
     * sheetId
     */
    sheetId: number

    /**
     *
     */
    sort?: Array<string>
  }): Promise<Array<BaseCommentDTO>> {
    return R.get(
      '/api/content/sheets/{sheetId}/comments/{commentParentId}/children',
      opt
    )
  },
  /**
   * Gets blog statistics.
   */
  statisticsGet(): Promise<StatisticDTO> {
    return R.get('/api/content/statistics')
  },
  /**
   * Gets blog statistics with user
   */
  statisticsUserGet(): Promise<StatisticWithUserDTO> {
    return R.get('/api/content/statistics/user')
  },
  /**
   * Lists tags
   */
  tagsGet(opt: {
    /**
     * If the param is true, post count of tag will be returned
     */
    more?: boolean

    /**
     *
     */
    sort?: Array<string>
  }): Promise<Array<TagDTO>> {
    return R.get('/api/content/tags', opt)
  },
  /**
   * Lists posts by tag slug
   */
  tagsSlugPostsGet(opt: {
    /**
     *
     */
    page?: number

    /**
     *
     */
    size?: number

    /**
     * slug
     */
    slug: string

    /**
     *
     */
    sort?: Array<string>
  }): Promise<PagePostListVO> {
    return R.get('/api/content/tags/{slug}/posts', opt)
  },
  /**
   * Gets activated theme property
   */
  themesActivationGet(): Promise<ThemeProperty> {
    return R.get('/api/content/themes/activation')
  },
  /**
   * Lists activated theme settings
   */
  themesActivationSettingsGet(): Promise<any> {
    return R.get('/api/content/themes/activation/settings')
  },
  /**
   * Gets blogger profile
   */
  usersProfileGet(): Promise<UserDTO> {
    return R.get('/api/content/users/profile')
  },
}
