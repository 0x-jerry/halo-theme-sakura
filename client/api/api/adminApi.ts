/**
 * Do not edit this file, this file is auto generate by script.
 * */

import {
  Attachment,
  AttachmentDTO,
  AttachmentParam,
  AuthToken,
  Author,
  BackupDTO,
  BaseCommentDTO,
  BaseCommentVO,
  BaseCommentWithParentVO,
  BaseMetaDTO,
  BasePostDetailDTO,
  BasePostMinimalDTO,
  BasePostSimpleDTO,
  BaseResponseboolean,
  BaseResponseobject,
  BaseResponsestring,
  CategoryDTO,
  CategoryParam,
  CategoryVO,
  EnvironmentDTO,
  Group,
  IndependentSheetDTO,
  InputStream,
  InstallParam,
  Item,
  JournalCommentParam,
  JournalCommentWithJournalVO,
  JournalDTO,
  JournalParam,
  JournalWithCmtCountDTO,
  LinkDTO,
  LinkParam,
  LogDTO,
  LoginParam,
  LoginPreCheckDTO,
  MailParam,
  MenuDTO,
  MenuParam,
  MenuVO,
  MultiFactorAuthParam,
  MultiFactorAuthVO,
  Option,
  OptionDTO,
  OptionParam,
  OptionSimpleDTO,
  Pageable,
  PageAttachmentDTO,
  PageBaseCommentVO,
  PageBaseCommentWithParentVO,
  PageBasePostSimpleDTO,
  PageJournalCommentWithJournalVO,
  PageJournalWithCmtCountDTO,
  PageLogDTO,
  PageOptionSimpleDTO,
  PagePhotoDTO,
  PagePostCommentWithPostVO,
  PageSheetCommentWithSheetVO,
  PageSheetListVO,
  PasswordParam,
  PhotoDTO,
  PhotoParam,
  Post,
  PostComment,
  PostCommentParam,
  PostCommentWithPostVO,
  PostContentParam,
  PostDetailVO,
  PostMarkdownParam,
  PostMetaParam,
  PostParam,
  ResetPasswordParam,
  Resource,
  SheetComment,
  SheetCommentParam,
  SheetCommentWithSheetVO,
  SheetDetailVO,
  SheetListVO,
  SheetMetaParam,
  SheetParam,
  Sort,
  StaticContentParam,
  StaticFile,
  StatisticDTO,
  StatisticWithUserDTO,
  TagDTO,
  TagParam,
  ThemeContentParam,
  ThemeFile,
  ThemeProperty,
  UserDTO,
  UserParam,
} from './adminApiDefine'

import * as R from '../request'

export const api = {
  /**
   * pageBy
   */
  attachmentsGet(opt: {
    /**
     *
     */
    attachmentType?:
      | 'ALIOSS'
      | 'BAIDUBOS'
      | 'HUAWEIOBS'
      | 'LOCAL'
      | 'MINIO'
      | 'QINIUOSS'
      | 'SMMS'
      | 'TENCENTCOS'
      | 'UPOSS'

    /**
     *
     */
    keyword?: string

    /**
     *
     */
    mediaType?: string

    /**
     *
     */
    page?: number

    /**
     *
     */
    size?: number

    /**
     *
     */
    sort?: Array<string>
  }): Promise<PageAttachmentDTO> {
    return R.get('/api/admin/attachments', opt)
  },
  /**
   * Deletes attachments permanently in batch by id array
   */
  attachmentsRemove(opt: {
    /**
     * ids
     */
    ids: any
  }): Promise<Array<Attachment>> {
    return R.remove('/api/admin/attachments', opt)
  },
  /**
   * Lists all of media types
   */
  attachmentsMedia_typesGet(): Promise<Array<string>> {
    return R.get('/api/admin/attachments/media_types')
  },
  /**
   * Lists all of types.
   */
  attachmentsTypesGet(): Promise<
    Array<
      | 'ALIOSS'
      | 'BAIDUBOS'
      | 'HUAWEIOBS'
      | 'LOCAL'
      | 'MINIO'
      | 'QINIUOSS'
      | 'SMMS'
      | 'TENCENTCOS'
      | 'UPOSS'
    >
  > {
    return R.get('/api/admin/attachments/types')
  },
  /**
   * Uploads single file
   */
  attachmentsUploadPost(opt: {
    /**
     *
     */
    file?: any
  }): Promise<AttachmentDTO> {
    return R.post('/api/admin/attachments/upload', opt)
  },
  /**
   * Uploads multi files (Invalid in Swagger UI)
   */
  attachmentsUploadsPost(opt: {
    /**
     *
     */
    files?: Array<any>
  }): Promise<Array<AttachmentDTO>> {
    return R.post('/api/admin/attachments/uploads', opt)
  },
  /**
   * Updates a attachment
   */
  attachmentsAttachmentIdPut(opt: {
    /**
     * attachmentId
     */
    attachmentId: number

    /**
     * attachmentParam
     */
    attachmentParam: any
  }): Promise<AttachmentDTO> {
    return R.put('/api/admin/attachments/{attachmentId}', opt)
  },
  /**
   * Gets attachment detail by id
   */
  attachmentsIdGet(opt: {
    /**
     * id
     */
    id: number
  }): Promise<AttachmentDTO> {
    return R.get('/api/admin/attachments/{id}', opt)
  },
  /**
   * Deletes attachment permanently by id
   */
  attachmentsIdRemove(opt: {
    /**
     * id
     */
    id: number
  }): Promise<AttachmentDTO> {
    return R.remove('/api/admin/attachments/{id}', opt)
  },
  /**
   * Lists all exported data
   */
  backupsDataGet(): Promise<Array<BackupDTO>> {
    return R.get('/api/admin/backups/data')
  },
  /**
   * Exports all data
   */
  backupsDataPost(): Promise<BackupDTO> {
    return R.post('/api/admin/backups/data')
  },
  /**
   * Deletes a exported data
   */
  backupsDataRemove(opt: {
    /**
     * filename
     */
    filename: string
  }): Promise<void> {
    return R.remove('/api/admin/backups/data', opt)
  },
  /**
   * Downloads a exported data
   */
  backupsDataFileNameGet(opt: {
    /**
     * fileName
     */
    fileName: string
  }): Promise<Resource> {
    return R.get('/api/admin/backups/data/{fileName}', opt)
  },
  /**
   * Gets all markdown backups
   */
  backupsMarkdownExportGet(): Promise<Array<BackupDTO>> {
    return R.get('/api/admin/backups/markdown/export')
  },
  /**
   * Exports markdowns
   */
  backupsMarkdownExportPost(opt: {
    /**
     * postMarkdownParam
     */
    postMarkdownParam: any
  }): Promise<BackupDTO> {
    return R.post('/api/admin/backups/markdown/export', opt)
  },
  /**
   * Deletes a markdown backup
   */
  backupsMarkdownExportRemove(opt: {
    /**
     * filename
     */
    filename: string
  }): Promise<void> {
    return R.remove('/api/admin/backups/markdown/export', opt)
  },
  /**
   * Downloads a work markdown backup file
   */
  backupsMarkdownExportFileNameGet(opt: {
    /**
     * fileName
     */
    fileName: string
  }): Promise<Resource> {
    return R.get('/api/admin/backups/markdown/export/{fileName}', opt)
  },
  /**
   * Imports markdown
   */
  backupsMarkdownImportPost(opt: {
    /**
     *
     */
    file?: any
  }): Promise<BasePostDetailDTO> {
    return R.post('/api/admin/backups/markdown/import', opt)
  },
  /**
   * Gets all work directory backups
   */
  'backupsWork-dirGet'(): Promise<Array<BackupDTO>> {
    return R.get('/api/admin/backups/work-dir')
  },
  /**
   * Backups work directory
   */
  'backupsWork-dirPost'(): Promise<BackupDTO> {
    return R.post('/api/admin/backups/work-dir')
  },
  /**
   * Deletes a work directory backup
   */
  'backupsWork-dirRemove'(opt: {
    /**
     * filename
     */
    filename: string
  }): Promise<void> {
    return R.remove('/api/admin/backups/work-dir', opt)
  },
  /**
   * Downloads a work directory backup file
   */
  'backupsWork-dirFileNameGet'(opt: {
    /**
     * fileName
     */
    fileName: string
  }): Promise<Resource> {
    return R.get('/api/admin/backups/work-dir/{fileName}', opt)
  },
  /**
   * Lists all categories
   */
  categoriesGet(opt: {
    /**
     * more
     */
    more?: boolean

    /**
     *
     */
    sort?: Array<string>
  }): Promise<Array<CategoryDTO>> {
    return R.get('/api/admin/categories', opt)
  },
  /**
   * Creates category
   */
  categoriesPost(opt: {
    /**
     * categoryParam
     */
    categoryParam: any
  }): Promise<CategoryDTO> {
    return R.post('/api/admin/categories', opt)
  },
  /**
   * List all categories as tree
   */
  categoriesTree_viewGet(opt: {
    /**
     *
     */
    sort?: Array<string>
  }): Promise<Array<CategoryVO>> {
    return R.get('/api/admin/categories/tree_view', opt)
  },
  /**
   * Gets category detail
   */
  categoriesCategoryIdGet(opt: {
    /**
     * categoryId
     */
    categoryId: number
  }): Promise<CategoryDTO> {
    return R.get('/api/admin/categories/{categoryId}', opt)
  },
  /**
   * Updates category
   */
  categoriesCategoryIdPut(opt: {
    /**
     * categoryId
     */
    categoryId: number

    /**
     * categoryParam
     */
    categoryParam: any
  }): Promise<CategoryDTO> {
    return R.put('/api/admin/categories/{categoryId}', opt)
  },
  /**
   * Deletes category
   */
  categoriesCategoryIdRemove(opt: {
    /**
     * categoryId
     */
    categoryId: number
  }): Promise<void> {
    return R.remove('/api/admin/categories/{categoryId}', opt)
  },
  /**
   * Gets count info
   */
  countsGet(): Promise<StatisticDTO> {
    return R.get('/api/admin/counts')
  },
  /**
   * Gets environments info
   */
  environmentsGet(): Promise<EnvironmentDTO> {
    return R.get('/api/admin/environments')
  },
  /**
   * Gets halo log file content
   */
  haloLogfileGet(opt: {
    /**
     * lines
     */
    lines: number
  }): Promise<BaseResponsestring> {
    return R.get('/api/admin/halo/logfile', opt)
  },
  /**
   * Initializes the blog
   */
  installationsPost(opt: {
    /**
     * installParam
     */
    installParam: any
  }): Promise<BaseResponsestring> {
    return R.post('/api/admin/installations', opt)
  },
  /**
   * Checks Installation status
   */
  is_installedGet(): Promise<boolean> {
    return R.get('/api/admin/is_installed')
  },
  /**
   * Lists journals
   */
  journalsGet(opt: {
    /**
     *
     */
    keyword?: string

    /**
     *
     */
    page?: number

    /**
     *
     */
    size?: number

    /**
     *
     */
    sort?: Array<string>

    /**
     *
     */
    type?: 'INTIMATE' | 'PUBLIC'
  }): Promise<PageJournalWithCmtCountDTO> {
    return R.get('/api/admin/journals', opt)
  },
  /**
   * Creates a journal
   */
  journalsPost(opt: {
    /**
     * journalParam
     */
    journalParam: any
  }): Promise<JournalDTO> {
    return R.post('/api/admin/journals', opt)
  },
  /**
   * Lists journal comments
   */
  journalsCommentsGet(opt: {
    /**
     *
     */
    keyword?: string

    /**
     *
     */
    page?: number

    /**
     *
     */
    size?: number

    /**
     *
     */
    sort?: Array<string>

    /**
     *
     */
    status?: 'AUDITING' | 'PUBLISHED' | 'RECYCLE'
  }): Promise<PageJournalCommentWithJournalVO> {
    return R.get('/api/admin/journals/comments', opt)
  },
  /**
   * Creates a journal comment
   */
  journalsCommentsPost(opt: {
    /**
     * journalCommentParam
     */
    journalCommentParam: any
  }): Promise<BaseCommentDTO> {
    return R.post('/api/admin/journals/comments', opt)
  },
  /**
   * Lists latest journal comments
   */
  journalsCommentsLatestGet(opt: {
    /**
     * status
     */
    status?: 'AUDITING' | 'PUBLISHED' | 'RECYCLE'

    /**
     * top
     */
    top?: number
  }): Promise<Array<JournalCommentWithJournalVO>> {
    return R.get('/api/admin/journals/comments/latest', opt)
  },
  /**
   * Deletes comment permanently and recursively
   */
  journalsCommentsCommentIdRemove(opt: {
    /**
     * commentId
     */
    commentId: number
  }): Promise<BaseCommentDTO> {
    return R.remove('/api/admin/journals/comments/{commentId}', opt)
  },
  /**
   * Updates comment status
   */
  journalsCommentsCommentIdStatusStatusPut(opt: {
    /**
     * commentId
     */
    commentId: number

    /**
     * status
     */
    status: 'AUDITING' | 'PUBLISHED' | 'RECYCLE'
  }): Promise<BaseCommentDTO> {
    return R.put(
      '/api/admin/journals/comments/{commentId}/status/{status}',
      opt
    )
  },
  /**
   * Lists comment with list view
   */
  journalsCommentsJournalIdList_viewGet(opt: {
    /**
     * journalId
     */
    journalId: number

    /**
     * page
     */
    page?: number

    /**
     *
     */
    sort?: Array<string>
  }): Promise<PageBaseCommentWithParentVO> {
    return R.get('/api/admin/journals/comments/{journalId}/list_view', opt)
  },
  /**
   * Lists comments with tree view
   */
  journalsCommentsJournalIdTree_viewGet(opt: {
    /**
     * journalId
     */
    journalId: number

    /**
     * page
     */
    page?: number

    /**
     *
     */
    sort?: Array<string>
  }): Promise<PageBaseCommentVO> {
    return R.get('/api/admin/journals/comments/{journalId}/tree_view', opt)
  },
  /**
   * Gets latest journals
   */
  journalsLatestGet(opt: {
    /**
     * top
     */
    top?: number
  }): Promise<Array<JournalWithCmtCountDTO>> {
    return R.get('/api/admin/journals/latest', opt)
  },
  /**
   * Updates a Journal
   */
  journalsIdPut(opt: {
    /**
     * id
     */
    id: number

    /**
     * journalParam
     */
    journalParam: any
  }): Promise<JournalDTO> {
    return R.put('/api/admin/journals/{id}', opt)
  },
  /**
   * Delete journal
   */
  journalsJournalIdRemove(opt: {
    /**
     * journalId
     */
    journalId: number
  }): Promise<JournalDTO> {
    return R.remove('/api/admin/journals/{journalId}', opt)
  },
  /**
   * Lists links
   */
  linksGet(opt: {
    /**
     *
     */
    sort?: Array<string>
  }): Promise<Array<LinkDTO>> {
    return R.get('/api/admin/links', opt)
  },
  /**
   * Creates a link
   */
  linksPost(opt: {
    /**
     * linkParam
     */
    linkParam: any
  }): Promise<LinkDTO> {
    return R.post('/api/admin/links', opt)
  },
  /**
   * Lists all link teams
   */
  linksTeamsGet(): Promise<Array<string>> {
    return R.get('/api/admin/links/teams')
  },
  /**
   * Gets link detail by id
   */
  linksIdGet(opt: {
    /**
     * id
     */
    id: number
  }): Promise<LinkDTO> {
    return R.get('/api/admin/links/{id}', opt)
  },
  /**
   * Updates a link
   */
  linksIdPut(opt: {
    /**
     * id
     */
    id: number

    /**
     * linkParam
     */
    linkParam: any
  }): Promise<LinkDTO> {
    return R.put('/api/admin/links/{id}', opt)
  },
  /**
   * Delete link by id
   */
  linksIdRemove(opt: {
    /**
     * id
     */
    id: number
  }): Promise<void> {
    return R.remove('/api/admin/links/{id}', opt)
  },
  /**
   * Login
   */
  loginPost(opt: {
    /**
     * loginParam
     */
    loginParam: any
  }): Promise<AuthToken> {
    return R.post('/api/admin/login', opt)
  },
  /**
   * Login
   */
  loginPrecheckPost(opt: {
    /**
     * loginParam
     */
    loginParam: any
  }): Promise<LoginPreCheckDTO> {
    return R.post('/api/admin/login/precheck', opt)
  },
  /**
   * Logs out (Clear session)
   */
  logoutPost(): Promise<void> {
    return R.post('/api/admin/logout')
  },
  /**
   * Lists logs
   */
  logsGet(opt: {
    /**
     *
     */
    page?: number

    /**
     *
     */
    size?: number

    /**
     *
     */
    sort?: Array<string>
  }): Promise<PageLogDTO> {
    return R.get('/api/admin/logs', opt)
  },
  /**
   * Clears all logs
   */
  logsClearGet(): Promise<void> {
    return R.get('/api/admin/logs/clear')
  },
  /**
   * Pages latest logs
   */
  logsLatestGet(opt: {
    /**
     * top
     */
    top?: number
  }): Promise<Array<LogDTO>> {
    return R.get('/api/admin/logs/latest', opt)
  },
  /**
   * Tests the SMTP service
   */
  mailsTestPost(opt: {
    /**
     * mailParam
     */
    mailParam: any
  }): Promise<BaseResponsestring> {
    return R.post('/api/admin/mails/test', opt)
  },
  /**
   * Test connection with email server
   */
  mailsTestConnectionPost(): Promise<BaseResponsestring> {
    return R.post('/api/admin/mails/test/connection')
  },
  /**
   * Lists all menus
   */
  menusGet(opt: {
    /**
     *
     */
    sort?: Array<string>
  }): Promise<Array<MenuDTO>> {
    return R.get('/api/admin/menus', opt)
  },
  /**
   * Creates a menu
   */
  menusPost(opt: {
    /**
     * menuParam
     */
    menuParam: any
  }): Promise<MenuDTO> {
    return R.post('/api/admin/menus', opt)
  },
  /**
   * createBatchBy
   */
  menusBatchPost(opt: {
    /**
     * menuParams
     */
    menuParams: any
  }): Promise<Array<MenuDTO>> {
    return R.post('/api/admin/menus/batch', opt)
  },
  /**
   * updateBatchBy
   */
  menusBatchPut(opt: {
    /**
     * menuParams
     */
    menuParams: any
  }): Promise<Array<MenuDTO>> {
    return R.put('/api/admin/menus/batch', opt)
  },
  /**
   * deleteBatchBy
   */
  menusBatchRemove(opt: {
    /**
     * menuIds
     */
    menuIds: any
  }): Promise<Array<MenuDTO>> {
    return R.remove('/api/admin/menus/batch', opt)
  },
  /**
   * Lists menus as tree by team
   */
  menusTeamTree_viewGet(opt: {
    /**
     *
     */
    sort?: Array<string>

    /**
     * team
     */
    team: string
  }): Promise<Array<MenuVO>> {
    return R.get('/api/admin/menus/team/tree_view', opt)
  },
  /**
   * Lists all menu teams
   */
  menusTeamsGet(): Promise<Array<string>> {
    return R.get('/api/admin/menus/teams')
  },
  /**
   * Lists menus as tree
   */
  menusTree_viewGet(opt: {
    /**
     *
     */
    sort?: Array<string>
  }): Promise<Array<MenuVO>> {
    return R.get('/api/admin/menus/tree_view', opt)
  },
  /**
   * Gets menu detail by id
   */
  menusMenuIdGet(opt: {
    /**
     * menuId
     */
    menuId: number
  }): Promise<MenuDTO> {
    return R.get('/api/admin/menus/{menuId}', opt)
  },
  /**
   * Updates a menu
   */
  menusMenuIdPut(opt: {
    /**
     * menuId
     */
    menuId: number

    /**
     * menuParam
     */
    menuParam: any
  }): Promise<MenuDTO> {
    return R.put('/api/admin/menus/{menuId}', opt)
  },
  /**
   * Deletes a menu
   */
  menusMenuIdRemove(opt: {
    /**
     * menuId
     */
    menuId: number
  }): Promise<MenuDTO> {
    return R.remove('/api/admin/menus/{menuId}', opt)
  },
  /**
   * Migrate from Halo
   */
  migrationsHaloPost(opt: {
    /**
     *
     */
    file?: any
  }): Promise<void> {
    return R.post('/api/admin/migrations/halo', opt)
  },
  /**
   * Lists options
   */
  optionsGet(): Promise<Array<OptionDTO>> {
    return R.get('/api/admin/options')
  },
  /**
   * Creates option
   */
  optionsPost(opt: {
    /**
     * optionParam
     */
    optionParam: any
  }): Promise<void> {
    return R.post('/api/admin/options', opt)
  },
  /**
   * Lists all options with list view
   */
  optionsList_viewGet(opt: {
    /**
     *
     */
    keyword?: string

    /**
     *
     */
    page?: number

    /**
     *
     */
    size?: number

    /**
     *
     */
    sort?: Array<string>

    /**
     *
     */
    type?: 'CUSTOM' | 'INTERNAL'
  }): Promise<PageOptionSimpleDTO> {
    return R.get('/api/admin/options/list_view', opt)
  },
  /**
   * Lists all options with map view
   */
  optionsMap_viewGet(): Promise<any> {
    return R.get('/api/admin/options/map_view')
  },
  /**
   * Lists options with map view by keys
   */
  optionsMap_viewKeysPost(opt: {
    /**
     * keys
     */
    keys: any
  }): Promise<any> {
    return R.post('/api/admin/options/map_view/keys', opt)
  },
  /**
   * Saves options by option map
   */
  optionsMap_viewSavingPost(opt: {
    /**
     * optionMap
     */
    optionMap: any
  }): Promise<void> {
    return R.post('/api/admin/options/map_view/saving', opt)
  },
  /**
   * Saves options
   */
  optionsSavingPost(opt: {
    /**
     * optionParams
     */
    optionParams: any
  }): Promise<void> {
    return R.post('/api/admin/options/saving', opt)
  },
  /**
   * Gets option detail by id
   */
  optionsIdGet(opt: {
    /**
     * id
     */
    id: number
  }): Promise<OptionSimpleDTO> {
    return R.get('/api/admin/options/{id}', opt)
  },
  /**
   * Updates option
   */
  optionsOptionIdPut(opt: {
    /**
     * optionId
     */
    optionId: number

    /**
     * optionParam
     */
    optionParam: any
  }): Promise<void> {
    return R.put('/api/admin/options/{optionId}', opt)
  },
  /**
   * Deletes option
   */
  optionsOptionIdRemove(opt: {
    /**
     * optionId
     */
    optionId: number
  }): Promise<void> {
    return R.remove('/api/admin/options/{optionId}', opt)
  },
  /**
   * Sends reset password verify code
   */
  passwordCodePost(opt: {
    /**
     * param
     */
    param: any
  }): Promise<void> {
    return R.post('/api/admin/password/code', opt)
  },
  /**
   * Resets password by verify code
   */
  passwordResetPut(opt: {
    /**
     * param
     */
    param: any
  }): Promise<void> {
    return R.put('/api/admin/password/reset', opt)
  },
  /**
   * Lists photos
   */
  photosGet(opt: {
    /**
     *
     */
    keyword?: string

    /**
     *
     */
    page?: number

    /**
     *
     */
    size?: number

    /**
     *
     */
    sort?: Array<string>

    /**
     *
     */
    team?: string
  }): Promise<PagePhotoDTO> {
    return R.get('/api/admin/photos', opt)
  },
  /**
   * Creates a photo
   */
  photosPost(opt: {
    /**
     * photoParam
     */
    photoParam: any
  }): Promise<PhotoDTO> {
    return R.post('/api/admin/photos', opt)
  },
  /**
   * Lists latest photos
   */
  photosLatestGet(opt: {
    /**
     *
     */
    sort?: Array<string>
  }): Promise<Array<PhotoDTO>> {
    return R.get('/api/admin/photos/latest', opt)
  },
  /**
   * Lists all of photo teams
   */
  photosTeamsGet(): Promise<Array<string>> {
    return R.get('/api/admin/photos/teams')
  },
  /**
   * Gets photo detail by id
   */
  photosPhotoIdGet(opt: {
    /**
     * photoId
     */
    photoId: number
  }): Promise<PhotoDTO> {
    return R.get('/api/admin/photos/{photoId}', opt)
  },
  /**
   * Updates a photo
   */
  photosPhotoIdPut(opt: {
    /**
     * photoId
     */
    photoId: number

    /**
     * photoParam
     */
    photoParam: any
  }): Promise<PhotoDTO> {
    return R.put('/api/admin/photos/{photoId}', opt)
  },
  /**
   * Deletes photo by id
   */
  photosPhotoIdRemove(opt: {
    /**
     * photoId
     */
    photoId: number
  }): Promise<void> {
    return R.remove('/api/admin/photos/{photoId}', opt)
  },
  /**
   * Lists posts
   */
  postsGet(opt: {
    /**
     *
     */
    categoryId?: number

    /**
     *
     */
    keyword?: string

    /**
     * more
     */
    more?: boolean

    /**
     *
     */
    page?: number

    /**
     *
     */
    size?: number

    /**
     *
     */
    sort?: Array<string>

    /**
     *
     */
    status?: 'DRAFT' | 'INTIMATE' | 'PUBLISHED' | 'RECYCLE'
  }): Promise<PageBasePostSimpleDTO> {
    return R.get('/api/admin/posts', opt)
  },
  /**
   * Creates a post
   */
  postsPost(opt: {
    /**
     * autoSave
     */
    autoSave?: boolean

    /**
     * postParam
     */
    postParam: any
  }): Promise<PostDetailVO> {
    return R.post('/api/admin/posts', opt)
  },
  /**
   * Deletes posts permanently in batch by id array
   */
  postsRemove(opt: {
    /**
     * ids
     */
    ids: any
  }): Promise<Array<Post>> {
    return R.remove('/api/admin/posts', opt)
  },
  /**
   * Lists post comments
   */
  postsCommentsGet(opt: {
    /**
     *
     */
    keyword?: string

    /**
     *
     */
    page?: number

    /**
     *
     */
    size?: number

    /**
     *
     */
    sort?: Array<string>

    /**
     *
     */
    status?: 'AUDITING' | 'PUBLISHED' | 'RECYCLE'
  }): Promise<PagePostCommentWithPostVO> {
    return R.get('/api/admin/posts/comments', opt)
  },
  /**
   * Creates a post comment (new or reply)
   */
  postsCommentsPost(opt: {
    /**
     * postCommentParam
     */
    postCommentParam: any
  }): Promise<BaseCommentDTO> {
    return R.post('/api/admin/posts/comments', opt)
  },
  /**
   * Delete post comments permanently in batch by id array
   */
  postsCommentsRemove(opt: {
    /**
     * ids
     */
    ids: any
  }): Promise<Array<PostComment>> {
    return R.remove('/api/admin/posts/comments', opt)
  },
  /**
   * Pages post latest comments
   */
  postsCommentsLatestGet(opt: {
    /**
     * status
     */
    status?: 'AUDITING' | 'PUBLISHED' | 'RECYCLE'

    /**
     * top
     */
    top?: number
  }): Promise<Array<PostCommentWithPostVO>> {
    return R.get('/api/admin/posts/comments/latest', opt)
  },
  /**
   * Updates post comment status in batch
   */
  postsCommentsStatusStatusPut(opt: {
    /**
     * ids
     */
    ids: any

    /**
     * status
     */
    status: 'AUDITING' | 'PUBLISHED' | 'RECYCLE'
  }): Promise<Array<BaseCommentDTO>> {
    return R.put('/api/admin/posts/comments/status/{status}', opt)
  },
  /**
   * Gets a post comment by comment id
   */
  postsCommentsCommentIdGet(opt: {
    /**
     * commentId
     */
    commentId: number
  }): Promise<PostCommentWithPostVO> {
    return R.get('/api/admin/posts/comments/{commentId}', opt)
  },
  /**
   * Updates a post comment
   */
  postsCommentsCommentIdPut(opt: {
    /**
     * commentId
     */
    commentId: number

    /**
     * commentParam
     */
    commentParam: any
  }): Promise<BaseCommentDTO> {
    return R.put('/api/admin/posts/comments/{commentId}', opt)
  },
  /**
   * Deletes post comment permanently and recursively
   */
  postsCommentsCommentIdRemove(opt: {
    /**
     * commentId
     */
    commentId: number
  }): Promise<BaseCommentDTO> {
    return R.remove('/api/admin/posts/comments/{commentId}', opt)
  },
  /**
   * Updates post comment status
   */
  postsCommentsCommentIdStatusStatusPut(opt: {
    /**
     * commentId
     */
    commentId: number

    /**
     * status
     */
    status: 'AUDITING' | 'PUBLISHED' | 'RECYCLE'
  }): Promise<BaseCommentDTO> {
    return R.put('/api/admin/posts/comments/{commentId}/status/{status}', opt)
  },
  /**
   * Lists post comment with list view
   */
  postsCommentsPostIdList_viewGet(opt: {
    /**
     * page
     */
    page?: number

    /**
     * postId
     */
    postId: number

    /**
     *
     */
    sort?: Array<string>
  }): Promise<PageBaseCommentWithParentVO> {
    return R.get('/api/admin/posts/comments/{postId}/list_view', opt)
  },
  /**
   * Lists post comments with tree view
   */
  postsCommentsPostIdTree_viewGet(opt: {
    /**
     * page
     */
    page?: number

    /**
     * postId
     */
    postId: number

    /**
     *
     */
    sort?: Array<string>
  }): Promise<PageBaseCommentVO> {
    return R.get('/api/admin/posts/comments/{postId}/tree_view', opt)
  },
  /**
   * Pages latest post
   */
  postsLatestGet(opt: {
    /**
     * top
     */
    top?: number
  }): Promise<Array<BasePostMinimalDTO>> {
    return R.get('/api/admin/posts/latest', opt)
  },
  /**
   * Gets a post preview link
   */
  postsPreviewPostIdGet(opt: {
    /**
     * postId
     */
    postId: number
  }): Promise<string> {
    return R.get('/api/admin/posts/preview/{postId}', opt)
  },
  /**
   * Gets a page of post by post status
   */
  postsStatusStatusGet(opt: {
    /**
     * more
     */
    more?: boolean

    /**
     *
     */
    page?: number

    /**
     *
     */
    size?: number

    /**
     *
     */
    sort?: Array<string>

    /**
     * status
     */
    status: 'DRAFT' | 'INTIMATE' | 'PUBLISHED' | 'RECYCLE'
  }): Promise<PageBasePostSimpleDTO> {
    return R.get('/api/admin/posts/status/{status}', opt)
  },
  /**
   * Updates post status in batch
   */
  postsStatusStatusPut(opt: {
    /**
     * ids
     */
    ids: any

    /**
     * status
     */
    status: 'DRAFT' | 'INTIMATE' | 'PUBLISHED' | 'RECYCLE'
  }): Promise<Array<Post>> {
    return R.put('/api/admin/posts/status/{status}', opt)
  },
  /**
   * Gets a post
   */
  postsPostIdGet(opt: {
    /**
     * postId
     */
    postId: number
  }): Promise<PostDetailVO> {
    return R.get('/api/admin/posts/{postId}', opt)
  },
  /**
   * Updates a post
   */
  postsPostIdPut(opt: {
    /**
     * autoSave
     */
    autoSave?: boolean

    /**
     * postId
     */
    postId: number

    /**
     * postParam
     */
    postParam: any
  }): Promise<PostDetailVO> {
    return R.put('/api/admin/posts/{postId}', opt)
  },
  /**
   * Deletes a photo permanently
   */
  postsPostIdRemove(opt: {
    /**
     * postId
     */
    postId: number
  }): Promise<void> {
    return R.remove('/api/admin/posts/{postId}', opt)
  },
  /**
   * Likes a post
   */
  postsPostIdLikesPut(opt: {
    /**
     * postId
     */
    postId: number
  }): Promise<void> {
    return R.put('/api/admin/posts/{postId}/likes', opt)
  },
  /**
   * Gets a post preview link
   */
  postsPostIdPreviewGet(opt: {
    /**
     * postId
     */
    postId: number
  }): Promise<string> {
    return R.get('/api/admin/posts/{postId}/preview', opt)
  },
  /**
   * Updates draft
   */
  postsPostIdStatusDraftContentPut(opt: {
    /**
     * contentParam
     */
    contentParam: any

    /**
     * postId
     */
    postId: number
  }): Promise<BasePostDetailDTO> {
    return R.put('/api/admin/posts/{postId}/status/draft/content', opt)
  },
  /**
   * Updates post status
   */
  postsPostIdStatusStatusPut(opt: {
    /**
     * postId
     */
    postId: number

    /**
     * status
     */
    status: 'DRAFT' | 'INTIMATE' | 'PUBLISHED' | 'RECYCLE'
  }): Promise<BasePostMinimalDTO> {
    return R.put('/api/admin/posts/{postId}/status/{status}', opt)
  },
  /**
   * Refreshes token
   */
  refreshRefreshTokenPost(opt: {
    /**
     * refreshToken
     */
    refreshToken: string
  }): Promise<AuthToken> {
    return R.post('/api/admin/refresh/{refreshToken}', opt)
  },
  /**
   * Gets a page of sheet
   */
  sheetsGet(opt: {
    /**
     *
     */
    page?: number

    /**
     *
     */
    size?: number

    /**
     *
     */
    sort?: Array<string>
  }): Promise<PageSheetListVO> {
    return R.get('/api/admin/sheets', opt)
  },
  /**
   * Creates a sheet
   */
  sheetsPost(opt: {
    /**
     * autoSave
     */
    autoSave?: boolean

    /**
     * sheetParam
     */
    sheetParam: any
  }): Promise<SheetDetailVO> {
    return R.post('/api/admin/sheets', opt)
  },
  /**
   * Lists sheet comments
   */
  sheetsCommentsGet(opt: {
    /**
     *
     */
    keyword?: string

    /**
     *
     */
    page?: number

    /**
     *
     */
    size?: number

    /**
     *
     */
    sort?: Array<string>

    /**
     *
     */
    status?: 'AUDITING' | 'PUBLISHED' | 'RECYCLE'
  }): Promise<PageSheetCommentWithSheetVO> {
    return R.get('/api/admin/sheets/comments', opt)
  },
  /**
   * Creates a sheet comment (new or reply)
   */
  sheetsCommentsPost(opt: {
    /**
     * commentParam
     */
    commentParam: any
  }): Promise<BaseCommentDTO> {
    return R.post('/api/admin/sheets/comments', opt)
  },
  /**
   * Deletes sheet comments permanently in batch by id array
   */
  sheetsCommentsRemove(opt: {
    /**
     * ids
     */
    ids: any
  }): Promise<Array<SheetComment>> {
    return R.remove('/api/admin/sheets/comments', opt)
  },
  /**
   * Lists latest sheet comments
   */
  sheetsCommentsLatestGet(opt: {
    /**
     * status
     */
    status?: 'AUDITING' | 'PUBLISHED' | 'RECYCLE'

    /**
     * top
     */
    top?: number
  }): Promise<Array<SheetCommentWithSheetVO>> {
    return R.get('/api/admin/sheets/comments/latest', opt)
  },
  /**
   * Updates sheet comment status in batch
   */
  sheetsCommentsStatusStatusPut(opt: {
    /**
     * ids
     */
    ids: any

    /**
     * status
     */
    status: 'AUDITING' | 'PUBLISHED' | 'RECYCLE'
  }): Promise<Array<BaseCommentDTO>> {
    return R.put('/api/admin/sheets/comments/status/{status}', opt)
  },
  /**
   * Gets a sheet comment by comment id
   */
  sheetsCommentsCommentIdGet(opt: {
    /**
     * commentId
     */
    commentId: number
  }): Promise<SheetCommentWithSheetVO> {
    return R.get('/api/admin/sheets/comments/{commentId}', opt)
  },
  /**
   * Updates a sheet comment
   */
  sheetsCommentsCommentIdPut(opt: {
    /**
     * commentId
     */
    commentId: number

    /**
     * commentParam
     */
    commentParam: any
  }): Promise<BaseCommentDTO> {
    return R.put('/api/admin/sheets/comments/{commentId}', opt)
  },
  /**
   * Deletes sheet comment permanently and recursively
   */
  sheetsCommentsCommentIdRemove(opt: {
    /**
     * commentId
     */
    commentId: number
  }): Promise<BaseCommentDTO> {
    return R.remove('/api/admin/sheets/comments/{commentId}', opt)
  },
  /**
   * Updates sheet comment status
   */
  sheetsCommentsCommentIdStatusStatusPut(opt: {
    /**
     * commentId
     */
    commentId: number

    /**
     * status
     */
    status: 'AUDITING' | 'PUBLISHED' | 'RECYCLE'
  }): Promise<BaseCommentDTO> {
    return R.put('/api/admin/sheets/comments/{commentId}/status/{status}', opt)
  },
  /**
   * Lists sheet comment with list view
   */
  sheetsCommentsSheetIdList_viewGet(opt: {
    /**
     * page
     */
    page?: number

    /**
     * sheetId
     */
    sheetId: number

    /**
     *
     */
    sort?: Array<string>
  }): Promise<PageBaseCommentWithParentVO> {
    return R.get('/api/admin/sheets/comments/{sheetId}/list_view', opt)
  },
  /**
   * Lists sheet comments with tree view
   */
  sheetsCommentsSheetIdTree_viewGet(opt: {
    /**
     * page
     */
    page?: number

    /**
     * sheetId
     */
    sheetId: number

    /**
     *
     */
    sort?: Array<string>
  }): Promise<PageBaseCommentVO> {
    return R.get('/api/admin/sheets/comments/{sheetId}/tree_view', opt)
  },
  /**
   * Lists independent sheets
   */
  sheetsIndependentGet(): Promise<Array<IndependentSheetDTO>> {
    return R.get('/api/admin/sheets/independent')
  },
  /**
   * Gets a sheet preview link
   */
  sheetsPreviewSheetIdGet(opt: {
    /**
     * sheetId
     */
    sheetId: number
  }): Promise<string> {
    return R.get('/api/admin/sheets/preview/{sheetId}', opt)
  },
  /**
   * Gets a sheet
   */
  sheetsSheetIdGet(opt: {
    /**
     * sheetId
     */
    sheetId: number
  }): Promise<SheetDetailVO> {
    return R.get('/api/admin/sheets/{sheetId}', opt)
  },
  /**
   * Updates a sheet
   */
  sheetsSheetIdPut(opt: {
    /**
     * autoSave
     */
    autoSave?: boolean

    /**
     * sheetId
     */
    sheetId: number

    /**
     * sheetParam
     */
    sheetParam: any
  }): Promise<SheetDetailVO> {
    return R.put('/api/admin/sheets/{sheetId}', opt)
  },
  /**
   * Deletes a sheet
   */
  sheetsSheetIdRemove(opt: {
    /**
     * sheetId
     */
    sheetId: number
  }): Promise<SheetDetailVO> {
    return R.remove('/api/admin/sheets/{sheetId}', opt)
  },
  /**
   * Updates draft
   */
  sheetsSheetIdStatusDraftContentPut(opt: {
    /**
     * contentParam
     */
    contentParam: any

    /**
     * sheetId
     */
    sheetId: number
  }): Promise<BasePostDetailDTO> {
    return R.put('/api/admin/sheets/{sheetId}/status/draft/content', opt)
  },
  /**
   * Updates a sheet
   */
  sheetsSheetIdStatusPut(opt: {
    /**
     * sheetId
     */
    sheetId: number

    /**
     * status
     */
    status: 'DRAFT' | 'INTIMATE' | 'PUBLISHED' | 'RECYCLE'
  }): Promise<void> {
    return R.put('/api/admin/sheets/{sheetId}/{status}', opt)
  },
  /**
   * Lists static files
   */
  staticsGet(): Promise<Array<StaticFile>> {
    return R.get('/api/admin/statics')
  },
  /**
   * Creates a folder
   */
  staticsPost(opt: {
    /**
     * basePath
     */
    basePath?: string

    /**
     * folderName
     */
    folderName: string
  }): Promise<void> {
    return R.post('/api/admin/statics', opt)
  },
  /**
   * Deletes file by relative path
   */
  staticsRemove(opt: {
    /**
     * path
     */
    path: string
  }): Promise<void> {
    return R.remove('/api/admin/statics', opt)
  },
  /**
   * Save static file
   */
  staticsFilesPut(opt: {
    /**
     * param
     */
    param: any
  }): Promise<void> {
    return R.put('/api/admin/statics/files', opt)
  },
  /**
   * Renames static file
   */
  staticsRenamePost(opt: {
    /**
     * basePath
     */
    basePath?: string

    /**
     * newName
     */
    newName?: string
  }): Promise<void> {
    return R.post('/api/admin/statics/rename', opt)
  },
  /**
   * Uploads static file
   */
  staticsUploadPost(opt: {
    /**
     * basePath
     */
    basePath?: string

    /**
     *
     */
    file?: any
  }): Promise<void> {
    return R.post('/api/admin/statics/upload', opt)
  },
  /**
   * Gets blog statistics.
   */
  statisticsGet(): Promise<StatisticDTO> {
    return R.get('/api/admin/statistics')
  },
  /**
   * Gets blog statistics with user
   */
  statisticsUserGet(): Promise<StatisticWithUserDTO> {
    return R.get('/api/admin/statistics/user')
  },
  /**
   * Lists tags
   */
  tagsGet(opt: {
    /**
     * Return more information(post count) if it is set
     */
    more?: boolean

    /**
     *
     */
    sort?: Array<string>
  }): Promise<Array<TagDTO>> {
    return R.get('/api/admin/tags', opt)
  },
  /**
   * Creates a tag
   */
  tagsPost(opt: {
    /**
     * tagParam
     */
    tagParam: any
  }): Promise<TagDTO> {
    return R.post('/api/admin/tags', opt)
  },
  /**
   * Gets tag detail by id
   */
  tagsTagIdGet(opt: {
    /**
     * tagId
     */
    tagId: number
  }): Promise<TagDTO> {
    return R.get('/api/admin/tags/{tagId}', opt)
  },
  /**
   * Updates a tag
   */
  tagsTagIdPut(opt: {
    /**
     * tagId
     */
    tagId: number

    /**
     * tagParam
     */
    tagParam: any
  }): Promise<TagDTO> {
    return R.put('/api/admin/tags/{tagId}', opt)
  },
  /**
   * Deletes a tag
   */
  tagsTagIdRemove(opt: {
    /**
     * tagId
     */
    tagId: number
  }): Promise<TagDTO> {
    return R.remove('/api/admin/tags/{tagId}', opt)
  },
  /**
   * Lists all themes
   */
  themesGet(): Promise<Array<ThemeProperty>> {
    return R.get('/api/admin/themes')
  },
  /**
   * Gets activate theme
   */
  themesActivationGet(): Promise<ThemeProperty> {
    return R.get('/api/admin/themes/activation')
  },
  /**
   * Fetches activated theme configuration
   */
  themesActivationConfigurationsGet(): Promise<BaseResponseobject> {
    return R.get('/api/admin/themes/activation/configurations')
  },
  /**
   * Lists all activate theme files
   */
  themesActivationFilesGet(): Promise<Array<ThemeFile>> {
    return R.get('/api/admin/themes/activation/files')
  },
  /**
   * Lists activated theme settings
   */
  themesActivationSettingsGet(): Promise<any> {
    return R.get('/api/admin/themes/activation/settings')
  },
  /**
   * Saves theme settings
   */
  themesActivationSettingsPost(opt: {
    /**
     * settings
     */
    settings: any
  }): Promise<void> {
    return R.post('/api/admin/themes/activation/settings', opt)
  },
  /**
   * Gets custom post templates
   */
  themesActivationTemplateCustomPostGet(): Promise<Array<string>> {
    return R.get('/api/admin/themes/activation/template/custom/post')
  },
  /**
   * Gets custom sheet templates
   */
  themesActivationTemplateCustomSheetGet(): Promise<Array<string>> {
    return R.get('/api/admin/themes/activation/template/custom/sheet')
  },
  /**
   * Determines if template exists
   */
  themesActivationTemplateExistsGet(opt: {
    /**
     * template
     */
    template: string
  }): Promise<BaseResponseboolean> {
    return R.get('/api/admin/themes/activation/template/exists', opt)
  },
  /**
   * Fetch specific branch
   */
  themesFetchBranchGet(opt: {
    /**
     * branch
     */
    branch: string

    /**
     * uri
     */
    uri: string
  }): Promise<ThemeProperty> {
    return R.get('/api/admin/themes/fetchBranch', opt)
  },
  /**
   * Fetch latest release
   */
  themesFetchLatestReleaseGet(opt: {
    /**
     * uri
     */
    uri: string
  }): Promise<ThemeProperty> {
    return R.get('/api/admin/themes/fetchLatestRelease', opt)
  },
  /**
   * Fetches a new theme
   */
  themesFetchingPost(opt: {
    /**
     * uri
     */
    uri: string
  }): Promise<ThemeProperty> {
    return R.post('/api/admin/themes/fetching', opt)
  },
  /**
   * Fetches all branches
   */
  themesFetchingGitBranchesPost(opt: {
    /**
     * uri
     */
    uri: string
  }): Promise<Array<ThemeProperty>> {
    return R.post('/api/admin/themes/fetching/git/branches', opt)
  },
  /**
   * Upgrades theme from remote
   */
  themesFetchingThemeIdPut(opt: {
    /**
     * themeId
     */
    themeId: string
  }): Promise<ThemeProperty> {
    return R.put('/api/admin/themes/fetching/{themeId}', opt)
  },
  /**
   * Fetches all branches
   */
  themesFetchingBranchesPost(opt: {
    /**
     * uri
     */
    uri: string
  }): Promise<Array<ThemeProperty>> {
    return R.post('/api/admin/themes/fetchingBranches', opt)
  },
  /**
   * Fetches a specific release
   */
  themesFetchingReleaseGet(opt: {
    /**
     * tag
     */
    tag: string

    /**
     * uri
     */
    uri: string
  }): Promise<ThemeProperty> {
    return R.get('/api/admin/themes/fetchingRelease', opt)
  },
  /**
   * Fetches all releases
   */
  themesFetchingReleasesPost(opt: {
    /**
     * uri
     */
    uri: string
  }): Promise<Array<ThemeProperty>> {
    return R.post('/api/admin/themes/fetchingReleases', opt)
  },
  /**
   * Gets template content
   */
  themesFilesContentGet(opt: {
    /**
     * path
     */
    path: string
  }): Promise<BaseResponsestring> {
    return R.get('/api/admin/themes/files/content', opt)
  },
  /**
   * Updates template content
   */
  themesFilesContentPut(opt: {
    /**
     * param
     */
    param: any
  }): Promise<void> {
    return R.put('/api/admin/themes/files/content', opt)
  },
  /**
   * Reloads themes
   */
  themesReloadPost(): Promise<void> {
    return R.post('/api/admin/themes/reload')
  },
  /**
   * Uploads a theme
   */
  themesUploadPost(opt: {
    /**
     *
     */
    file?: any
  }): Promise<ThemeProperty> {
    return R.post('/api/admin/themes/upload', opt)
  },
  /**
   * Upgrades theme by file
   */
  themesUploadThemeIdPut(opt: {
    /**
     *
     */
    file?: any

    /**
     * themeId
     */
    themeId: string
  }): Promise<ThemeProperty> {
    return R.put('/api/admin/themes/upload/{themeId}', opt)
  },
  /**
   * Gets theme property by theme id
   */
  themesThemeIdGet(opt: {
    /**
     * themeId
     */
    themeId: string
  }): Promise<ThemeProperty> {
    return R.get('/api/admin/themes/{themeId}', opt)
  },
  /**
   * Deletes a theme
   */
  themesThemeIdRemove(opt: {
    /**
     * deleteSettings
     */
    deleteSettings?: boolean

    /**
     * themeId
     */
    themeId: string
  }): Promise<void> {
    return R.remove('/api/admin/themes/{themeId}', opt)
  },
  /**
   * Activates a theme
   */
  themesThemeIdActivationPost(opt: {
    /**
     * themeId
     */
    themeId: string
  }): Promise<ThemeProperty> {
    return R.post('/api/admin/themes/{themeId}/activation', opt)
  },
  /**
   * Fetches theme configuration by theme id
   */
  themesThemeIdConfigurationsGet(opt: {
    /**
     * themeId
     */
    themeId: string
  }): Promise<Array<Group>> {
    return R.get('/api/admin/themes/{themeId}/configurations', opt)
  },
  /**
   * Lists theme files by theme id
   */
  themesThemeIdFilesGet(opt: {
    /**
     * themeId
     */
    themeId: string
  }): Promise<Array<ThemeFile>> {
    return R.get('/api/admin/themes/{themeId}/files', opt)
  },
  /**
   * Gets template content by theme id
   */
  themesThemeIdFilesContentGet(opt: {
    /**
     * path
     */
    path: string

    /**
     * themeId
     */
    themeId: string
  }): Promise<BaseResponsestring> {
    return R.get('/api/admin/themes/{themeId}/files/content', opt)
  },
  /**
   * Updates template content by theme id
   */
  themesThemeIdFilesContentPut(opt: {
    /**
     * param
     */
    param: any

    /**
     * themeId
     */
    themeId: string
  }): Promise<void> {
    return R.put('/api/admin/themes/{themeId}/files/content', opt)
  },
  /**
   * Lists theme settings by theme id
   */
  themesThemeIdSettingsGet(opt: {
    /**
     * themeId
     */
    themeId: string
  }): Promise<any> {
    return R.get('/api/admin/themes/{themeId}/settings', opt)
  },
  /**
   * Saves theme settings
   */
  themesThemeIdSettingsPost(opt: {
    /**
     * settings
     */
    settings: any

    /**
     * themeId
     */
    themeId: string
  }): Promise<void> {
    return R.post('/api/admin/themes/{themeId}/settings', opt)
  },
  /**
   * Generate Multi-Factor Auth qr image
   */
  usersMfaGeneratePut(opt: {
    /**
     * multiFactorAuthParam
     */
    multiFactorAuthParam: any
  }): Promise<MultiFactorAuthVO> {
    return R.put('/api/admin/users/mfa/generate', opt)
  },
  /**
   * Updates user's Multi Factor Auth
   */
  usersMfaUpdatePut(opt: {
    /**
     * multiFactorAuthParam
     */
    multiFactorAuthParam: any
  }): Promise<MultiFactorAuthVO> {
    return R.put('/api/admin/users/mfa/update', opt)
  },
  /**
   * Gets user profile
   */
  usersProfilesGet(): Promise<UserDTO> {
    return R.get('/api/admin/users/profiles')
  },
  /**
   * Updates user profile
   */
  usersProfilesPut(opt: {
    /**
     * userParam
     */
    userParam: any
  }): Promise<UserDTO> {
    return R.put('/api/admin/users/profiles', opt)
  },
  /**
   * Updates user's password
   */
  usersProfilesPasswordPut(opt: {
    /**
     * passwordParam
     */
    passwordParam: any
  }): Promise<BaseResponsestring> {
    return R.put('/api/admin/users/profiles/password', opt)
  },
}
